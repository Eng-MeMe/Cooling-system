
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002576  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00002576  0000260a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006c  0080006c  00002616  2**0
                  ALLOC
  3 .stab         00002ad8  00000000  00000000  00002618  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bd4  00000000  00000000  000050f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a858  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ac45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b413  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 36       	cpi	r26, 0x6E	; 110
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 02 12 	call	0x2404	; 0x2404 <main>
      8a:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e6       	ldi	r26, 0x64	; 100
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e6       	ldi	r24, 0x64	; 100
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <USART_Init>:
#include "UART.h"
#define BAUD_PRESCALE ((F_CPU / (UART_BAUDRATE * 8UL))-1)
void USART_Init (void)					// Function to initialize the UART
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	// Enable Double speed mode

	UCSRA = (1<<U2X);
     b4e:	eb e2       	ldi	r30, 0x2B	; 43
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	82 e0       	ldi	r24, 0x02	; 2
     b54:	80 83       	st	Z, r24
	 * Disable for UDR empty register interrupt
	 * RXB8 & TXB not Used
	 * Enable receiver (RXEN = 1)
	 * Enable Transmitter (TXEN = 1)
	 */
	UCSRB = (1<<RXEN) | (1<<TXEN);
     b56:	ea e2       	ldi	r30, 0x2A	; 42
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	88 e1       	ldi	r24, 0x18	; 24
     b5c:	80 83       	st	Z, r24
	 * USBS = 0 for 1 stop bit
	 * UCSZ1:0 = 1 (8-Bit data length)
	 * UCPOL = 0  (Used with Synchronous mode Only)
	 */

	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
     b5e:	e0 e4       	ldi	r30, 0x40	; 64
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	86 e8       	ldi	r24, 0x86	; 134
     b64:	80 83       	st	Z, r24

	// Set value of UBRR register with defined baudrate (9600)
	UBRRH = BAUD_PRESCALE >> 8;
     b66:	e0 e4       	ldi	r30, 0x40	; 64
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
     b6c:	e9 e2       	ldi	r30, 0x29	; 41
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	8c e0       	ldi	r24, 0x0C	; 12
     b72:	80 83       	st	Z, r24

}
     b74:	cf 91       	pop	r28
     b76:	df 91       	pop	r29
     b78:	08 95       	ret

00000b7a <USART_sendByte>:

void USART_sendByte (u8 data)			// Function to send data byte
{
     b7a:	df 93       	push	r29
     b7c:	cf 93       	push	r28
     b7e:	0f 92       	push	r0
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
     b84:	89 83       	std	Y+1, r24	; 0x01
	while (BIT_IS_CLEAR(UCSRA,UDRE));	//Polling until UDR register is empty and ready to take data
     b86:	eb e2       	ldi	r30, 0x2B	; 43
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	80 72       	andi	r24, 0x20	; 32
     b92:	90 70       	andi	r25, 0x00	; 0
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	b9 f3       	breq	.-18     	; 0xb86 <USART_sendByte+0xc>
	UDR = data;						//Set data to UDR register
     b98:	ec e2       	ldi	r30, 0x2C	; 44
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	80 83       	st	Z, r24
	/*
	UDR = data;
	while (BIT_IS_CLEAR(UCSRA,TXC));
	SET_BIT(UCSRA,TXC);
	 */
}
     ba0:	0f 90       	pop	r0
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <USART_receiveByte>:

u8 USART_receiveByte (void)				// Function to receive data byte
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(UCSRA,RXC));	//Polling until UDR register is full with data
     bb0:	eb e2       	ldi	r30, 0x2B	; 43
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	88 23       	and	r24, r24
     bb8:	dc f7       	brge	.-10     	; 0xbb0 <USART_receiveByte+0x8>
	return UDR;							// Return the data from UDR register
     bba:	ec e2       	ldi	r30, 0x2C	; 44
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
}
     bc0:	cf 91       	pop	r28
     bc2:	df 91       	pop	r29
     bc4:	08 95       	ret

00000bc6 <USART_sendString>:

void USART_sendString (const u8 *str)	// Function to send string
{
     bc6:	df 93       	push	r29
     bc8:	cf 93       	push	r28
     bca:	00 d0       	rcall	.+0      	; 0xbcc <USART_sendString+0x6>
     bcc:	0f 92       	push	r0
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	9b 83       	std	Y+3, r25	; 0x03
     bd4:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
     bd6:	19 82       	std	Y+1, r1	; 0x01
     bd8:	0e c0       	rjmp	.+28     	; 0xbf6 <USART_sendString+0x30>

	while (str[i] != '\0')
	{
		USART_sendByte(str[i]);
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	28 2f       	mov	r18, r24
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	8a 81       	ldd	r24, Y+2	; 0x02
     be2:	9b 81       	ldd	r25, Y+3	; 0x03
     be4:	fc 01       	movw	r30, r24
     be6:	e2 0f       	add	r30, r18
     be8:	f3 1f       	adc	r31, r19
     bea:	80 81       	ld	r24, Z
     bec:	0e 94 bd 05 	call	0xb7a	; 0xb7a <USART_sendByte>
		i++;
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	8f 5f       	subi	r24, 0xFF	; 255
     bf4:	89 83       	std	Y+1, r24	; 0x01

void USART_sendString (const u8 *str)	// Function to send string
{
	u8 i = 0;

	while (str[i] != '\0')
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	8a 81       	ldd	r24, Y+2	; 0x02
     bfe:	9b 81       	ldd	r25, Y+3	; 0x03
     c00:	fc 01       	movw	r30, r24
     c02:	e2 0f       	add	r30, r18
     c04:	f3 1f       	adc	r31, r19
     c06:	80 81       	ld	r24, Z
     c08:	88 23       	and	r24, r24
     c0a:	39 f7       	brne	.-50     	; 0xbda <USART_sendString+0x14>
	{
		USART_sendByte(str[i]);
		i++;
	}
}
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <USART_receiveString>:

void USART_receiveString (u8 *str)		// Function to receive string
{
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	df 93       	push	r29
     c1e:	cf 93       	push	r28
     c20:	00 d0       	rcall	.+0      	; 0xc22 <USART_receiveString+0xa>
     c22:	0f 92       	push	r0
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	9b 83       	std	Y+3, r25	; 0x03
     c2a:	8a 83       	std	Y+2, r24	; 0x02

	u8 i = 0;
     c2c:	19 82       	std	Y+1, r1	; 0x01
	str[i] = USART_receiveByte();
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	28 2f       	mov	r18, r24
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
     c36:	9b 81       	ldd	r25, Y+3	; 0x03
     c38:	8c 01       	movw	r16, r24
     c3a:	02 0f       	add	r16, r18
     c3c:	13 1f       	adc	r17, r19
     c3e:	0e 94 d4 05 	call	0xba8	; 0xba8 <USART_receiveByte>
     c42:	f8 01       	movw	r30, r16
     c44:	80 83       	st	Z, r24
     c46:	0f c0       	rjmp	.+30     	; 0xc66 <USART_receiveString+0x4e>
	while (str[i] != "#")
	{
		i++;
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	8f 5f       	subi	r24, 0xFF	; 255
     c4c:	89 83       	std	Y+1, r24	; 0x01
		str[i] =USART_receiveByte();
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	9b 81       	ldd	r25, Y+3	; 0x03
     c58:	8c 01       	movw	r16, r24
     c5a:	02 0f       	add	r16, r18
     c5c:	13 1f       	adc	r17, r19
     c5e:	0e 94 d4 05 	call	0xba8	; 0xba8 <USART_receiveByte>
     c62:	f8 01       	movw	r30, r16
     c64:	80 83       	st	Z, r24
void USART_receiveString (u8 *str)		// Function to receive string
{

	u8 i = 0;
	str[i] = USART_receiveByte();
	while (str[i] != "#")
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	8a 81       	ldd	r24, Y+2	; 0x02
     c6e:	9b 81       	ldd	r25, Y+3	; 0x03
     c70:	fc 01       	movw	r30, r24
     c72:	e2 0f       	add	r30, r18
     c74:	f3 1f       	adc	r31, r19
     c76:	80 81       	ld	r24, Z
     c78:	88 2f       	mov	r24, r24
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 36       	cpi	r24, 0x60	; 96
     c80:	9f 07       	cpc	r25, r31
     c82:	11 f7       	brne	.-60     	; 0xc48 <USART_receiveString+0x30>
	{
		i++;
		str[i] =USART_receiveByte();
	}
	str[i] = '\0';
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	28 2f       	mov	r18, r24
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	9b 81       	ldd	r25, Y+3	; 0x03
     c8e:	fc 01       	movw	r30, r24
     c90:	e2 0f       	add	r30, r18
     c92:	f3 1f       	adc	r31, r19
     c94:	10 82       	st	Z, r1
}
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	1f 91       	pop	r17
     ca2:	0f 91       	pop	r16
     ca4:	08 95       	ret

00000ca6 <SPI_InitMaster>:

/****************************************************************************************************/
/*****************************************Function Definition****************************************/

void SPI_InitMaster (void)				// Function to initialize the master
{
     ca6:	df 93       	push	r29
     ca8:	cf 93       	push	r28
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
	 * SS >> o/p pin
	 * MOSI >> o/p pin
	 * MISO >> i/p pin
	 * SCLK >> o/p pin
	 */
	DDRB |= (1<<4);
     cae:	a7 e3       	ldi	r26, 0x37	; 55
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e7 e3       	ldi	r30, 0x37	; 55
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	80 61       	ori	r24, 0x10	; 16
     cba:	8c 93       	st	X, r24
	DDRB |= (1<<5);
     cbc:	a7 e3       	ldi	r26, 0x37	; 55
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e7 e3       	ldi	r30, 0x37	; 55
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	80 62       	ori	r24, 0x20	; 32
     cc8:	8c 93       	st	X, r24
	DDRB &= (~(1<<6));
     cca:	a7 e3       	ldi	r26, 0x37	; 55
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e7 e3       	ldi	r30, 0x37	; 55
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	8f 7b       	andi	r24, 0xBF	; 191
     cd6:	8c 93       	st	X, r24
	DDRB |= (1<<7);
     cd8:	a7 e3       	ldi	r26, 0x37	; 55
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e7 e3       	ldi	r30, 0x37	; 55
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	80 68       	ori	r24, 0x80	; 128
     ce4:	8c 93       	st	X, r24

	SPCR = (1 <<SPE) | (1<<MSTR); 		//Enable SPI + Enable Master + SPI clock = F_CPU / 4
     ce6:	ed e2       	ldi	r30, 0x2D	; 45
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 e5       	ldi	r24, 0x50	; 80
     cec:	80 83       	st	Z, r24
}
     cee:	cf 91       	pop	r28
     cf0:	df 91       	pop	r29
     cf2:	08 95       	ret

00000cf4 <SPI_InitSlave>:

void SPI_InitSlave (void)
{
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
	 * MOSI >> i/p pin
	 * MISO >> o/p pin
	 * SCLK >> i/p pin
	 */

	DDRB &= (~(1<<4));
     cfc:	a7 e3       	ldi	r26, 0x37	; 55
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e7 e3       	ldi	r30, 0x37	; 55
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	8f 7e       	andi	r24, 0xEF	; 239
     d08:	8c 93       	st	X, r24
	DDRB &= (~(1<<5));
     d0a:	a7 e3       	ldi	r26, 0x37	; 55
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e7 e3       	ldi	r30, 0x37	; 55
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	8f 7d       	andi	r24, 0xDF	; 223
     d16:	8c 93       	st	X, r24
	DDRB |= (1<<6);
     d18:	a7 e3       	ldi	r26, 0x37	; 55
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e7 e3       	ldi	r30, 0x37	; 55
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	80 64       	ori	r24, 0x40	; 64
     d24:	8c 93       	st	X, r24
	DDRB &= (~(1<<7));
     d26:	a7 e3       	ldi	r26, 0x37	; 55
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e7 e3       	ldi	r30, 0x37	; 55
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	8f 77       	andi	r24, 0x7F	; 127
     d32:	8c 93       	st	X, r24

	SPCR = (1 <<SPE); 					//Enable SPI + Enable Slave + SPI clock = F_CPU / 4
     d34:	ed e2       	ldi	r30, 0x2D	; 45
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	80 83       	st	Z, r24
}
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <SPI_sendByte>:

void SPI_sendByte (u8 data)				// Function to send data byte
{
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	0f 92       	push	r0
     d48:	cd b7       	in	r28, 0x3d	; 61
     d4a:	de b7       	in	r29, 0x3e	; 62
     d4c:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;						// Set data at SPI data register
     d4e:	ef e2       	ldi	r30, 0x2F	; 47
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	80 83       	st	Z, r24
	while (BIT_IS_CLEAR(SPSR,SPIF));	//Polling SPI flag = 1
     d56:	ee e2       	ldi	r30, 0x2E	; 46
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	88 23       	and	r24, r24
     d5e:	dc f7       	brge	.-10     	; 0xd56 <SPI_sendByte+0x14>
}
     d60:	0f 90       	pop	r0
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <SPI_receiveByte>:

u8 SPI_receiveByte (void)				// Function to receive data byte
{
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(SPSR,SPIF));	//Polling SPI flag = 1
     d70:	ee e2       	ldi	r30, 0x2E	; 46
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	88 23       	and	r24, r24
     d78:	dc f7       	brge	.-10     	; 0xd70 <SPI_receiveByte+0x8>
	return SPDR; 						//return the received data from SPI data register
     d7a:	ef e2       	ldi	r30, 0x2F	; 47
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
}
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <SPI_sendString>:

void SPI_sendString (const u8 *str)		// Function to send string
{
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <SPI_sendString+0x6>
     d8c:	0f 92       	push	r0
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	9b 83       	std	Y+3, r25	; 0x03
     d94:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
     d96:	19 82       	std	Y+1, r1	; 0x01
     d98:	0e c0       	rjmp	.+28     	; 0xdb6 <SPI_sendString+0x30>
	while (str[i] != '\0')
	{
		SPI_sendByte(str[i]);
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	9b 81       	ldd	r25, Y+3	; 0x03
     da4:	fc 01       	movw	r30, r24
     da6:	e2 0f       	add	r30, r18
     da8:	f3 1f       	adc	r31, r19
     daa:	80 81       	ld	r24, Z
     dac:	0e 94 a1 06 	call	0xd42	; 0xd42 <SPI_sendByte>
		i++;
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	8f 5f       	subi	r24, 0xFF	; 255
     db4:	89 83       	std	Y+1, r24	; 0x01
}

void SPI_sendString (const u8 *str)		// Function to send string
{
	u8 i = 0;
	while (str[i] != '\0')
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	9b 81       	ldd	r25, Y+3	; 0x03
     dc0:	fc 01       	movw	r30, r24
     dc2:	e2 0f       	add	r30, r18
     dc4:	f3 1f       	adc	r31, r19
     dc6:	80 81       	ld	r24, Z
     dc8:	88 23       	and	r24, r24
     dca:	39 f7       	brne	.-50     	; 0xd9a <SPI_sendString+0x14>
	{
		SPI_sendByte(str[i]);
		i++;
	}
}
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	cf 91       	pop	r28
     dd4:	df 91       	pop	r29
     dd6:	08 95       	ret

00000dd8 <SPI_receiveString>:

void SPI_receiveString (u8 *str)		// Function to receive string
{
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	00 d0       	rcall	.+0      	; 0xde2 <SPI_receiveString+0xa>
     de2:	0f 92       	push	r0
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	9b 83       	std	Y+3, r25	; 0x03
     dea:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
     dec:	19 82       	std	Y+1, r1	; 0x01
	str[i] = SPI_receiveByte();
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	9b 81       	ldd	r25, Y+3	; 0x03
     df8:	8c 01       	movw	r16, r24
     dfa:	02 0f       	add	r16, r18
     dfc:	13 1f       	adc	r17, r19
     dfe:	0e 94 b4 06 	call	0xd68	; 0xd68 <SPI_receiveByte>
     e02:	f8 01       	movw	r30, r16
     e04:	80 83       	st	Z, r24
     e06:	0f c0       	rjmp	.+30     	; 0xe26 <SPI_receiveString+0x4e>
	while (str[i] != "#")
	{
		i++;
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	8f 5f       	subi	r24, 0xFF	; 255
     e0c:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_receiveByte();
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	9b 81       	ldd	r25, Y+3	; 0x03
     e18:	8c 01       	movw	r16, r24
     e1a:	02 0f       	add	r16, r18
     e1c:	13 1f       	adc	r17, r19
     e1e:	0e 94 b4 06 	call	0xd68	; 0xd68 <SPI_receiveByte>
     e22:	f8 01       	movw	r30, r16
     e24:	80 83       	st	Z, r24

void SPI_receiveString (u8 *str)		// Function to receive string
{
	u8 i = 0;
	str[i] = SPI_receiveByte();
	while (str[i] != "#")
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	9b 81       	ldd	r25, Y+3	; 0x03
     e30:	fc 01       	movw	r30, r24
     e32:	e2 0f       	add	r30, r18
     e34:	f3 1f       	adc	r31, r19
     e36:	80 81       	ld	r24, Z
     e38:	88 2f       	mov	r24, r24
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	82 36       	cpi	r24, 0x62	; 98
     e40:	9f 07       	cpc	r25, r31
     e42:	11 f7       	brne	.-60     	; 0xe08 <SPI_receiveString+0x30>
	{
		i++;
		str[i] = SPI_receiveByte();
	}
	str[i] = '\0';
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	9b 81       	ldd	r25, Y+3	; 0x03
     e4e:	fc 01       	movw	r30, r24
     e50:	e2 0f       	add	r30, r18
     e52:	f3 1f       	adc	r31, r19
     e54:	10 82       	st	Z, r1
}
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	08 95       	ret

00000e66 <__vector_6>:
static volatile void (*g_CallBackPtr)(void) = NULL_Ptr;

/****************************************************************************************************/
/******************************************Function Interrupt****************************************/
ISR (TIMER1_CAPT_vect)
{
     e66:	1f 92       	push	r1
     e68:	0f 92       	push	r0
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	0f 92       	push	r0
     e6e:	11 24       	eor	r1, r1
     e70:	2f 93       	push	r18
     e72:	3f 93       	push	r19
     e74:	4f 93       	push	r20
     e76:	5f 93       	push	r21
     e78:	6f 93       	push	r22
     e7a:	7f 93       	push	r23
     e7c:	8f 93       	push	r24
     e7e:	9f 93       	push	r25
     e80:	af 93       	push	r26
     e82:	bf 93       	push	r27
     e84:	ef 93       	push	r30
     e86:	ff 93       	push	r31
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
	if (*g_CallBackPtr != NULL_Ptr)
     e90:	80 91 6c 00 	lds	r24, 0x006C
     e94:	90 91 6d 00 	lds	r25, 0x006D
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	29 f0       	breq	.+10     	; 0xea6 <__vector_6+0x40>
	(*g_CallBackPtr)();
     e9c:	e0 91 6c 00 	lds	r30, 0x006C
     ea0:	f0 91 6d 00 	lds	r31, 0x006D
     ea4:	09 95       	icall
}
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	ff 91       	pop	r31
     eac:	ef 91       	pop	r30
     eae:	bf 91       	pop	r27
     eb0:	af 91       	pop	r26
     eb2:	9f 91       	pop	r25
     eb4:	8f 91       	pop	r24
     eb6:	7f 91       	pop	r23
     eb8:	6f 91       	pop	r22
     eba:	5f 91       	pop	r21
     ebc:	4f 91       	pop	r20
     ebe:	3f 91       	pop	r19
     ec0:	2f 91       	pop	r18
     ec2:	0f 90       	pop	r0
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	0f 90       	pop	r0
     ec8:	1f 90       	pop	r1
     eca:	18 95       	reti

00000ecc <ICU_Init>:

/****************************************************************************************************/
/*****************************************Function Definition****************************************/

void ICU_Init (ICU_Config_t *config_ptr)
{
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <ICU_Init+0x6>
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	9a 83       	std	Y+2, r25	; 0x02
     ed8:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(PORTD,6);										// Set ICU pin as i/p Pin
     eda:	a2 e3       	ldi	r26, 0x32	; 50
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e2 e3       	ldi	r30, 0x32	; 50
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	8f 7b       	andi	r24, 0xBF	; 191
     ee6:	8c 93       	st	X, r24
	TCCR1A = (1<<FOC1A) | (1<<FOC1A);						// Set Timer1 with normal mode & Start Counting
     ee8:	ef e4       	ldi	r30, 0x4F	; 79
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	88 e0       	ldi	r24, 0x08	; 8
     eee:	80 83       	st	Z, r24
	TCCR1B = (TCCR1B & 0xF8) | (config_ptr -> clock);		// Set Prescaler accroding to the passed prescaler
     ef0:	ae e4       	ldi	r26, 0x4E	; 78
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	ee e4       	ldi	r30, 0x4E	; 78
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	98 2f       	mov	r25, r24
     efc:	98 7f       	andi	r25, 0xF8	; 248
     efe:	e9 81       	ldd	r30, Y+1	; 0x01
     f00:	fa 81       	ldd	r31, Y+2	; 0x02
     f02:	81 81       	ldd	r24, Z+1	; 0x01
     f04:	89 2b       	or	r24, r25
     f06:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xBF) | ((config_ptr -> edge)<<6);	// Set the Edge accroding to the passed edge
     f08:	ae e4       	ldi	r26, 0x4E	; 78
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	ee e4       	ldi	r30, 0x4E	; 78
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	28 2f       	mov	r18, r24
     f14:	2f 7b       	andi	r18, 0xBF	; 191
     f16:	e9 81       	ldd	r30, Y+1	; 0x01
     f18:	fa 81       	ldd	r31, Y+2	; 0x02
     f1a:	80 81       	ld	r24, Z
     f1c:	88 2f       	mov	r24, r24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	00 24       	eor	r0, r0
     f22:	96 95       	lsr	r25
     f24:	87 95       	ror	r24
     f26:	07 94       	ror	r0
     f28:	96 95       	lsr	r25
     f2a:	87 95       	ror	r24
     f2c:	07 94       	ror	r0
     f2e:	98 2f       	mov	r25, r24
     f30:	80 2d       	mov	r24, r0
     f32:	82 2b       	or	r24, r18
     f34:	8c 93       	st	X, r24
	TCNT1 = 0;												// Initialize Timer/Counter register with value 0
     f36:	ec e4       	ldi	r30, 0x4C	; 76
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	11 82       	std	Z+1, r1	; 0x01
     f3c:	10 82       	st	Z, r1
	ICR1 = 0;												// Initialize ICR register with value 0
     f3e:	e6 e4       	ldi	r30, 0x46	; 70
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	11 82       	std	Z+1, r1	; 0x01
     f44:	10 82       	st	Z, r1
	TIMSK |= (1<<TICIE1);									//Enable ICU interrupt at Timer1
     f46:	a9 e5       	ldi	r26, 0x59	; 89
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e9 e5       	ldi	r30, 0x59	; 89
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	80 62       	ori	r24, 0x20	; 32
     f52:	8c 93       	st	X, r24
}
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <ICU_SelectEdge>:
void ICU_SelectEdge (ICU_Edge_t edge)
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	0f 92       	push	r0
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = (TCCR1B & 0xBF) | ((edge)<<6);	 // Set the Edge accroding to the passed edge
     f6a:	ae e4       	ldi	r26, 0x4E	; 78
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	ee e4       	ldi	r30, 0x4E	; 78
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	28 2f       	mov	r18, r24
     f76:	2f 7b       	andi	r18, 0xBF	; 191
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	88 2f       	mov	r24, r24
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	00 24       	eor	r0, r0
     f80:	96 95       	lsr	r25
     f82:	87 95       	ror	r24
     f84:	07 94       	ror	r0
     f86:	96 95       	lsr	r25
     f88:	87 95       	ror	r24
     f8a:	07 94       	ror	r0
     f8c:	98 2f       	mov	r25, r24
     f8e:	80 2d       	mov	r24, r0
     f90:	82 2b       	or	r24, r18
     f92:	8c 93       	st	X, r24
}
     f94:	0f 90       	pop	r0
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	08 95       	ret

00000f9c <ICU_GetInputCaptureValue>:
u16 ICU_GetInputCaptureValue (void)
{
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
	return ICR1;	// Return the value which is inside ICR1
     fa4:	e6 e4       	ldi	r30, 0x46	; 70
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	91 81       	ldd	r25, Z+1	; 0x01
}
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <ICU_ClearTimerValue>:
void ICU_ClearTimerValue (void)
{
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;	// Clear Timer/Counter register
     fba:	ec e4       	ldi	r30, 0x4C	; 76
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	11 82       	std	Z+1, r1	; 0x01
     fc0:	10 82       	st	Z, r1
}
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <ICU_SetCallBack>:
void ICU_SetCallBack (void (*ptr2func)(void))
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	00 d0       	rcall	.+0      	; 0xfce <ICU_SetCallBack+0x6>
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	9a 83       	std	Y+2, r25	; 0x02
     fd4:	89 83       	std	Y+1, r24	; 0x01
	g_CallBackPtr = ptr2func;	// Assign the address of the passed function to the global pointer function
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	9a 81       	ldd	r25, Y+2	; 0x02
     fda:	90 93 6d 00 	sts	0x006D, r25
     fde:	80 93 6c 00 	sts	0x006C, r24
}
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <ICU_deInit>:
void ICU_deInit (void)
{
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR1A,FOC1A);	// Stop the counter and de-initialize the Timer
     ff4:	af e4       	ldi	r26, 0x4F	; 79
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	ef e4       	ldi	r30, 0x4F	; 79
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	87 7f       	andi	r24, 0xF7	; 247
    1000:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,FOC1B);
    1002:	ae e4       	ldi	r26, 0x4E	; 78
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	ee e4       	ldi	r30, 0x4E	; 78
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	8b 7f       	andi	r24, 0xFB	; 251
    100e:	8c 93       	st	X, r24
	TCNT1 = 0;					// Initialize Timer/Counter register with value 0
    1010:	ec e4       	ldi	r30, 0x4C	; 76
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	11 82       	std	Z+1, r1	; 0x01
    1016:	10 82       	st	Z, r1
	ICR1 = 0;					// Initialize ICR register with value 0
    1018:	e6 e4       	ldi	r30, 0x46	; 70
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	11 82       	std	Z+1, r1	; 0x01
    101e:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,TICIE1);	// Disable ICU interrupt for Timer1
    1020:	a9 e5       	ldi	r26, 0x59	; 89
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e9 e5       	ldi	r30, 0x59	; 89
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	8f 7d       	andi	r24, 0xDF	; 223
    102c:	8c 93       	st	X, r24
}
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <Set_PinDir>:
/****************************************Function Definition***************************************/

//	For Certain Bit

void Set_PinDir (GroupName_t group, PIN_NO_t number, PinDir_t direction)	// Function to set direction of certain bit
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	27 97       	sbiw	r28, 0x07	; 7
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	6a 83       	std	Y+2, r22	; 0x02
    104c:	4b 83       	std	Y+3, r20	; 0x03
	if(direction == OUTPUT)
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	09 f0       	breq	.+2      	; 0x1056 <Set_PinDir+0x22>
    1054:	6f c0       	rjmp	.+222    	; 0x1134 <Set_PinDir+0x100>
	{
		switch (group)
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	3f 83       	std	Y+7, r19	; 0x07
    105e:	2e 83       	std	Y+6, r18	; 0x06
    1060:	8e 81       	ldd	r24, Y+6	; 0x06
    1062:	9f 81       	ldd	r25, Y+7	; 0x07
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	91 05       	cpc	r25, r1
    1068:	49 f1       	breq	.+82     	; 0x10bc <Set_PinDir+0x88>
    106a:	2e 81       	ldd	r18, Y+6	; 0x06
    106c:	3f 81       	ldd	r19, Y+7	; 0x07
    106e:	22 30       	cpi	r18, 0x02	; 2
    1070:	31 05       	cpc	r19, r1
    1072:	2c f4       	brge	.+10     	; 0x107e <Set_PinDir+0x4a>
    1074:	8e 81       	ldd	r24, Y+6	; 0x06
    1076:	9f 81       	ldd	r25, Y+7	; 0x07
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	61 f0       	breq	.+24     	; 0x1094 <Set_PinDir+0x60>
    107c:	ce c0       	rjmp	.+412    	; 0x121a <Set_PinDir+0x1e6>
    107e:	2e 81       	ldd	r18, Y+6	; 0x06
    1080:	3f 81       	ldd	r19, Y+7	; 0x07
    1082:	22 30       	cpi	r18, 0x02	; 2
    1084:	31 05       	cpc	r19, r1
    1086:	71 f1       	breq	.+92     	; 0x10e4 <Set_PinDir+0xb0>
    1088:	8e 81       	ldd	r24, Y+6	; 0x06
    108a:	9f 81       	ldd	r25, Y+7	; 0x07
    108c:	83 30       	cpi	r24, 0x03	; 3
    108e:	91 05       	cpc	r25, r1
    1090:	e9 f1       	breq	.+122    	; 0x110c <Set_PinDir+0xd8>
    1092:	c3 c0       	rjmp	.+390    	; 0x121a <Set_PinDir+0x1e6>
		{
		case PORT_A:
			SET_BIT(DDRA,number);
    1094:	aa e3       	ldi	r26, 0x3A	; 58
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	ea e3       	ldi	r30, 0x3A	; 58
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	48 2f       	mov	r20, r24
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <Set_PinDir+0x7e>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <Set_PinDir+0x7a>
    10b6:	84 2b       	or	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	af c0       	rjmp	.+350    	; 0x121a <Set_PinDir+0x1e6>
			break;
		case PORT_B:
			SET_BIT(DDRB,number);
    10bc:	a7 e3       	ldi	r26, 0x37	; 55
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e7 e3       	ldi	r30, 0x37	; 55
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <Set_PinDir+0xa6>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <Set_PinDir+0xa2>
    10de:	84 2b       	or	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	9b c0       	rjmp	.+310    	; 0x121a <Set_PinDir+0x1e6>
			break;
		case PORT_C:
			SET_BIT(DDRC,number);
    10e4:	a4 e3       	ldi	r26, 0x34	; 52
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e4 e3       	ldi	r30, 0x34	; 52
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <Set_PinDir+0xce>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <Set_PinDir+0xca>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	87 c0       	rjmp	.+270    	; 0x121a <Set_PinDir+0x1e6>
			break;
		case PORT_D:
			SET_BIT(DDRD,number);
    110c:	a1 e3       	ldi	r26, 0x31	; 49
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e1 e3       	ldi	r30, 0x31	; 49
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <Set_PinDir+0xf6>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <Set_PinDir+0xf2>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	73 c0       	rjmp	.+230    	; 0x121a <Set_PinDir+0x1e6>
			break;
		}
	}
	else
	{
		switch (group)
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	3d 83       	std	Y+5, r19	; 0x05
    113c:	2c 83       	std	Y+4, r18	; 0x04
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	9d 81       	ldd	r25, Y+5	; 0x05
    1142:	81 30       	cpi	r24, 0x01	; 1
    1144:	91 05       	cpc	r25, r1
    1146:	59 f1       	breq	.+86     	; 0x119e <Set_PinDir+0x16a>
    1148:	2c 81       	ldd	r18, Y+4	; 0x04
    114a:	3d 81       	ldd	r19, Y+5	; 0x05
    114c:	22 30       	cpi	r18, 0x02	; 2
    114e:	31 05       	cpc	r19, r1
    1150:	2c f4       	brge	.+10     	; 0x115c <Set_PinDir+0x128>
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	9d 81       	ldd	r25, Y+5	; 0x05
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	69 f0       	breq	.+26     	; 0x1174 <Set_PinDir+0x140>
    115a:	5f c0       	rjmp	.+190    	; 0x121a <Set_PinDir+0x1e6>
    115c:	2c 81       	ldd	r18, Y+4	; 0x04
    115e:	3d 81       	ldd	r19, Y+5	; 0x05
    1160:	22 30       	cpi	r18, 0x02	; 2
    1162:	31 05       	cpc	r19, r1
    1164:	89 f1       	breq	.+98     	; 0x11c8 <Set_PinDir+0x194>
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	9d 81       	ldd	r25, Y+5	; 0x05
    116a:	83 30       	cpi	r24, 0x03	; 3
    116c:	91 05       	cpc	r25, r1
    116e:	09 f4       	brne	.+2      	; 0x1172 <Set_PinDir+0x13e>
    1170:	40 c0       	rjmp	.+128    	; 0x11f2 <Set_PinDir+0x1be>
    1172:	53 c0       	rjmp	.+166    	; 0x121a <Set_PinDir+0x1e6>
		{
		case PORT_A:
			CLEAR_BIT(DDRA,number);
    1174:	aa e3       	ldi	r26, 0x3A	; 58
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	ea e3       	ldi	r30, 0x3A	; 58
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	48 2f       	mov	r20, r24
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	02 2e       	mov	r0, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <Set_PinDir+0x15e>
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	0a 94       	dec	r0
    1194:	e2 f7       	brpl	.-8      	; 0x118e <Set_PinDir+0x15a>
    1196:	80 95       	com	r24
    1198:	84 23       	and	r24, r20
    119a:	8c 93       	st	X, r24
    119c:	3e c0       	rjmp	.+124    	; 0x121a <Set_PinDir+0x1e6>
			break;
		case PORT_B:
			CLEAR_BIT(DDRB,number);
    119e:	a7 e3       	ldi	r26, 0x37	; 55
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e7 e3       	ldi	r30, 0x37	; 55
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	48 2f       	mov	r20, r24
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	02 2e       	mov	r0, r18
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <Set_PinDir+0x188>
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	0a 94       	dec	r0
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <Set_PinDir+0x184>
    11c0:	80 95       	com	r24
    11c2:	84 23       	and	r24, r20
    11c4:	8c 93       	st	X, r24
    11c6:	29 c0       	rjmp	.+82     	; 0x121a <Set_PinDir+0x1e6>
			break;
		case PORT_C:
			CLEAR_BIT(DDRC,number);
    11c8:	a4 e3       	ldi	r26, 0x34	; 52
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e4 e3       	ldi	r30, 0x34	; 52
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	48 2f       	mov	r20, r24
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 2e       	mov	r0, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <Set_PinDir+0x1b2>
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	0a 94       	dec	r0
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <Set_PinDir+0x1ae>
    11ea:	80 95       	com	r24
    11ec:	84 23       	and	r24, r20
    11ee:	8c 93       	st	X, r24
    11f0:	14 c0       	rjmp	.+40     	; 0x121a <Set_PinDir+0x1e6>
			break;
		case PORT_D:
			CLEAR_BIT(DDRD,number);
    11f2:	a1 e3       	ldi	r26, 0x31	; 49
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e1 e3       	ldi	r30, 0x31	; 49
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	48 2f       	mov	r20, r24
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	02 2e       	mov	r0, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <Set_PinDir+0x1dc>
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	0a 94       	dec	r0
    1212:	e2 f7       	brpl	.-8      	; 0x120c <Set_PinDir+0x1d8>
    1214:	80 95       	com	r24
    1216:	84 23       	and	r24, r20
    1218:	8c 93       	st	X, r24
			break;
		}
	}
}
    121a:	27 96       	adiw	r28, 0x07	; 7
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <Set_PinLevel>:

void Set_PinLevel (GroupName_t group, PIN_NO_t number, PinLevel_t level )	// Function to set level of certain bit
{
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	27 97       	sbiw	r28, 0x07	; 7
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	89 83       	std	Y+1, r24	; 0x01
    1242:	6a 83       	std	Y+2, r22	; 0x02
    1244:	4b 83       	std	Y+3, r20	; 0x03
	if (level == HIGH)
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	09 f0       	breq	.+2      	; 0x124e <Set_PinLevel+0x22>
    124c:	6f c0       	rjmp	.+222    	; 0x132c <Set_PinLevel+0x100>
	{
		switch (group)
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	3f 83       	std	Y+7, r19	; 0x07
    1256:	2e 83       	std	Y+6, r18	; 0x06
    1258:	8e 81       	ldd	r24, Y+6	; 0x06
    125a:	9f 81       	ldd	r25, Y+7	; 0x07
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	91 05       	cpc	r25, r1
    1260:	49 f1       	breq	.+82     	; 0x12b4 <Set_PinLevel+0x88>
    1262:	2e 81       	ldd	r18, Y+6	; 0x06
    1264:	3f 81       	ldd	r19, Y+7	; 0x07
    1266:	22 30       	cpi	r18, 0x02	; 2
    1268:	31 05       	cpc	r19, r1
    126a:	2c f4       	brge	.+10     	; 0x1276 <Set_PinLevel+0x4a>
    126c:	8e 81       	ldd	r24, Y+6	; 0x06
    126e:	9f 81       	ldd	r25, Y+7	; 0x07
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	61 f0       	breq	.+24     	; 0x128c <Set_PinLevel+0x60>
    1274:	ce c0       	rjmp	.+412    	; 0x1412 <Set_PinLevel+0x1e6>
    1276:	2e 81       	ldd	r18, Y+6	; 0x06
    1278:	3f 81       	ldd	r19, Y+7	; 0x07
    127a:	22 30       	cpi	r18, 0x02	; 2
    127c:	31 05       	cpc	r19, r1
    127e:	71 f1       	breq	.+92     	; 0x12dc <Set_PinLevel+0xb0>
    1280:	8e 81       	ldd	r24, Y+6	; 0x06
    1282:	9f 81       	ldd	r25, Y+7	; 0x07
    1284:	83 30       	cpi	r24, 0x03	; 3
    1286:	91 05       	cpc	r25, r1
    1288:	e9 f1       	breq	.+122    	; 0x1304 <Set_PinLevel+0xd8>
    128a:	c3 c0       	rjmp	.+390    	; 0x1412 <Set_PinLevel+0x1e6>
		{
		case PORT_A:
			SET_BIT(PORTA,number);
    128c:	ab e3       	ldi	r26, 0x3B	; 59
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	eb e3       	ldi	r30, 0x3B	; 59
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	48 2f       	mov	r20, r24
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 2e       	mov	r0, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <Set_PinLevel+0x7e>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <Set_PinLevel+0x7a>
    12ae:	84 2b       	or	r24, r20
    12b0:	8c 93       	st	X, r24
    12b2:	af c0       	rjmp	.+350    	; 0x1412 <Set_PinLevel+0x1e6>
			break;
		case PORT_B:
			SET_BIT(PORTB,number);
    12b4:	a8 e3       	ldi	r26, 0x38	; 56
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e8 e3       	ldi	r30, 0x38	; 56
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <Set_PinLevel+0xa6>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <Set_PinLevel+0xa2>
    12d6:	84 2b       	or	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	9b c0       	rjmp	.+310    	; 0x1412 <Set_PinLevel+0x1e6>
			break;
		case PORT_C:
			SET_BIT(PORTC,number);
    12dc:	a5 e3       	ldi	r26, 0x35	; 53
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e5 e3       	ldi	r30, 0x35	; 53
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <Set_PinLevel+0xce>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <Set_PinLevel+0xca>
    12fe:	84 2b       	or	r24, r20
    1300:	8c 93       	st	X, r24
    1302:	87 c0       	rjmp	.+270    	; 0x1412 <Set_PinLevel+0x1e6>
			break;
		case PORT_D:
			SET_BIT(PORTD,number);
    1304:	a2 e3       	ldi	r26, 0x32	; 50
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e2 e3       	ldi	r30, 0x32	; 50
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	02 2e       	mov	r0, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <Set_PinLevel+0xf6>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	0a 94       	dec	r0
    1324:	e2 f7       	brpl	.-8      	; 0x131e <Set_PinLevel+0xf2>
    1326:	84 2b       	or	r24, r20
    1328:	8c 93       	st	X, r24
    132a:	73 c0       	rjmp	.+230    	; 0x1412 <Set_PinLevel+0x1e6>
			break;
		}
	}
	else
	{
		switch (group)
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	3d 83       	std	Y+5, r19	; 0x05
    1334:	2c 83       	std	Y+4, r18	; 0x04
    1336:	8c 81       	ldd	r24, Y+4	; 0x04
    1338:	9d 81       	ldd	r25, Y+5	; 0x05
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	91 05       	cpc	r25, r1
    133e:	59 f1       	breq	.+86     	; 0x1396 <Set_PinLevel+0x16a>
    1340:	2c 81       	ldd	r18, Y+4	; 0x04
    1342:	3d 81       	ldd	r19, Y+5	; 0x05
    1344:	22 30       	cpi	r18, 0x02	; 2
    1346:	31 05       	cpc	r19, r1
    1348:	2c f4       	brge	.+10     	; 0x1354 <Set_PinLevel+0x128>
    134a:	8c 81       	ldd	r24, Y+4	; 0x04
    134c:	9d 81       	ldd	r25, Y+5	; 0x05
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	69 f0       	breq	.+26     	; 0x136c <Set_PinLevel+0x140>
    1352:	5f c0       	rjmp	.+190    	; 0x1412 <Set_PinLevel+0x1e6>
    1354:	2c 81       	ldd	r18, Y+4	; 0x04
    1356:	3d 81       	ldd	r19, Y+5	; 0x05
    1358:	22 30       	cpi	r18, 0x02	; 2
    135a:	31 05       	cpc	r19, r1
    135c:	89 f1       	breq	.+98     	; 0x13c0 <Set_PinLevel+0x194>
    135e:	8c 81       	ldd	r24, Y+4	; 0x04
    1360:	9d 81       	ldd	r25, Y+5	; 0x05
    1362:	83 30       	cpi	r24, 0x03	; 3
    1364:	91 05       	cpc	r25, r1
    1366:	09 f4       	brne	.+2      	; 0x136a <Set_PinLevel+0x13e>
    1368:	40 c0       	rjmp	.+128    	; 0x13ea <Set_PinLevel+0x1be>
    136a:	53 c0       	rjmp	.+166    	; 0x1412 <Set_PinLevel+0x1e6>
		{
		case PORT_A:
			CLEAR_BIT(PORTA,number);
    136c:	ab e3       	ldi	r26, 0x3B	; 59
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	eb e3       	ldi	r30, 0x3B	; 59
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	48 2f       	mov	r20, r24
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	02 2e       	mov	r0, r18
    1384:	02 c0       	rjmp	.+4      	; 0x138a <Set_PinLevel+0x15e>
    1386:	88 0f       	add	r24, r24
    1388:	99 1f       	adc	r25, r25
    138a:	0a 94       	dec	r0
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <Set_PinLevel+0x15a>
    138e:	80 95       	com	r24
    1390:	84 23       	and	r24, r20
    1392:	8c 93       	st	X, r24
    1394:	3e c0       	rjmp	.+124    	; 0x1412 <Set_PinLevel+0x1e6>
			break;
		case PORT_B:
			CLEAR_BIT(PORTB,number);
    1396:	a8 e3       	ldi	r26, 0x38	; 56
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e8 e3       	ldi	r30, 0x38	; 56
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	48 2f       	mov	r20, r24
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	02 2e       	mov	r0, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <Set_PinLevel+0x188>
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	0a 94       	dec	r0
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <Set_PinLevel+0x184>
    13b8:	80 95       	com	r24
    13ba:	84 23       	and	r24, r20
    13bc:	8c 93       	st	X, r24
    13be:	29 c0       	rjmp	.+82     	; 0x1412 <Set_PinLevel+0x1e6>
			break;
		case PORT_C:
			CLEAR_BIT(PORTC,number);
    13c0:	a5 e3       	ldi	r26, 0x35	; 53
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e5 e3       	ldi	r30, 0x35	; 53
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 2e       	mov	r0, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <Set_PinLevel+0x1b2>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	0a 94       	dec	r0
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <Set_PinLevel+0x1ae>
    13e2:	80 95       	com	r24
    13e4:	84 23       	and	r24, r20
    13e6:	8c 93       	st	X, r24
    13e8:	14 c0       	rjmp	.+40     	; 0x1412 <Set_PinLevel+0x1e6>
			break;
		case PORT_D:
			CLEAR_BIT(PORTD,number);
    13ea:	a2 e3       	ldi	r26, 0x32	; 50
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e2 e3       	ldi	r30, 0x32	; 50
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <Set_PinLevel+0x1dc>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <Set_PinLevel+0x1d8>
    140c:	80 95       	com	r24
    140e:	84 23       	and	r24, r20
    1410:	8c 93       	st	X, r24
			break;
		}
	}
}
    1412:	27 96       	adiw	r28, 0x07	; 7
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <Read_PinLevel>:

RET_VALUE_t Read_PinLevel (GroupName_t group, PIN_NO_t number)		// Function to read level of certain bit
{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	00 d0       	rcall	.+0      	; 0x142a <Read_PinLevel+0x6>
    142a:	00 d0       	rcall	.+0      	; 0x142c <Read_PinLevel+0x8>
    142c:	0f 92       	push	r0
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	8a 83       	std	Y+2, r24	; 0x02
    1434:	6b 83       	std	Y+3, r22	; 0x03
	RET_VALUE_t ret;
	switch (group)
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	3d 83       	std	Y+5, r19	; 0x05
    143e:	2c 83       	std	Y+4, r18	; 0x04
    1440:	8c 81       	ldd	r24, Y+4	; 0x04
    1442:	9d 81       	ldd	r25, Y+5	; 0x05
    1444:	81 30       	cpi	r24, 0x01	; 1
    1446:	91 05       	cpc	r25, r1
    1448:	39 f1       	breq	.+78     	; 0x1498 <Read_PinLevel+0x74>
    144a:	2c 81       	ldd	r18, Y+4	; 0x04
    144c:	3d 81       	ldd	r19, Y+5	; 0x05
    144e:	22 30       	cpi	r18, 0x02	; 2
    1450:	31 05       	cpc	r19, r1
    1452:	2c f4       	brge	.+10     	; 0x145e <Read_PinLevel+0x3a>
    1454:	8c 81       	ldd	r24, Y+4	; 0x04
    1456:	9d 81       	ldd	r25, Y+5	; 0x05
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	61 f0       	breq	.+24     	; 0x1474 <Read_PinLevel+0x50>
    145c:	52 c0       	rjmp	.+164    	; 0x1502 <Read_PinLevel+0xde>
    145e:	2c 81       	ldd	r18, Y+4	; 0x04
    1460:	3d 81       	ldd	r19, Y+5	; 0x05
    1462:	22 30       	cpi	r18, 0x02	; 2
    1464:	31 05       	cpc	r19, r1
    1466:	51 f1       	breq	.+84     	; 0x14bc <Read_PinLevel+0x98>
    1468:	8c 81       	ldd	r24, Y+4	; 0x04
    146a:	9d 81       	ldd	r25, Y+5	; 0x05
    146c:	83 30       	cpi	r24, 0x03	; 3
    146e:	91 05       	cpc	r25, r1
    1470:	b9 f1       	breq	.+110    	; 0x14e0 <Read_PinLevel+0xbc>
    1472:	47 c0       	rjmp	.+142    	; 0x1502 <Read_PinLevel+0xde>
	{
	case PORT_A:
		ret = BIT_IS_SET(PINA,number);
    1474:	e9 e3       	ldi	r30, 0x39	; 57
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	48 2f       	mov	r20, r24
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	02 2e       	mov	r0, r18
    1488:	02 c0       	rjmp	.+4      	; 0x148e <Read_PinLevel+0x6a>
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	0a 94       	dec	r0
    1490:	e2 f7       	brpl	.-8      	; 0x148a <Read_PinLevel+0x66>
    1492:	84 23       	and	r24, r20
    1494:	89 83       	std	Y+1, r24	; 0x01
    1496:	35 c0       	rjmp	.+106    	; 0x1502 <Read_PinLevel+0xde>
		break;
	case PORT_B:
		ret = BIT_IS_SET(PINB,number);
    1498:	e6 e3       	ldi	r30, 0x36	; 54
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	48 2f       	mov	r20, r24
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	02 2e       	mov	r0, r18
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <Read_PinLevel+0x8e>
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	0a 94       	dec	r0
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <Read_PinLevel+0x8a>
    14b6:	84 23       	and	r24, r20
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	23 c0       	rjmp	.+70     	; 0x1502 <Read_PinLevel+0xde>
		break;
	case PORT_C:
		ret = BIT_IS_SET(PINC,number);
    14bc:	e3 e3       	ldi	r30, 0x33	; 51
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	48 2f       	mov	r20, r24
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	02 2e       	mov	r0, r18
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <Read_PinLevel+0xb2>
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	0a 94       	dec	r0
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <Read_PinLevel+0xae>
    14da:	84 23       	and	r24, r20
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	11 c0       	rjmp	.+34     	; 0x1502 <Read_PinLevel+0xde>
		break;
	case PORT_D:
		ret = BIT_IS_SET(PIND,number);
    14e0:	e0 e3       	ldi	r30, 0x30	; 48
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	48 2f       	mov	r20, r24
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	02 2e       	mov	r0, r18
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <Read_PinLevel+0xd6>
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	0a 94       	dec	r0
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <Read_PinLevel+0xd2>
    14fe:	84 23       	and	r24, r20
    1500:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return ret;
    1502:	89 81       	ldd	r24, Y+1	; 0x01
}
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <Set_GroupDir>:

//	 For Group Of Pins

void Set_GroupDir (GroupName_t group, u8 value)							// Function to set direction of group of pins
{
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	00 d0       	rcall	.+0      	; 0x151a <Set_GroupDir+0x6>
    151a:	00 d0       	rcall	.+0      	; 0x151c <Set_GroupDir+0x8>
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	89 83       	std	Y+1, r24	; 0x01
    1522:	6a 83       	std	Y+2, r22	; 0x02
	switch (group)
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	3c 83       	std	Y+4, r19	; 0x04
    152c:	2b 83       	std	Y+3, r18	; 0x03
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	9c 81       	ldd	r25, Y+4	; 0x04
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	91 05       	cpc	r25, r1
    1536:	d1 f0       	breq	.+52     	; 0x156c <Set_GroupDir+0x58>
    1538:	2b 81       	ldd	r18, Y+3	; 0x03
    153a:	3c 81       	ldd	r19, Y+4	; 0x04
    153c:	22 30       	cpi	r18, 0x02	; 2
    153e:	31 05       	cpc	r19, r1
    1540:	2c f4       	brge	.+10     	; 0x154c <Set_GroupDir+0x38>
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	9c 81       	ldd	r25, Y+4	; 0x04
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	61 f0       	breq	.+24     	; 0x1562 <Set_GroupDir+0x4e>
    154a:	1e c0       	rjmp	.+60     	; 0x1588 <Set_GroupDir+0x74>
    154c:	2b 81       	ldd	r18, Y+3	; 0x03
    154e:	3c 81       	ldd	r19, Y+4	; 0x04
    1550:	22 30       	cpi	r18, 0x02	; 2
    1552:	31 05       	cpc	r19, r1
    1554:	81 f0       	breq	.+32     	; 0x1576 <Set_GroupDir+0x62>
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9c 81       	ldd	r25, Y+4	; 0x04
    155a:	83 30       	cpi	r24, 0x03	; 3
    155c:	91 05       	cpc	r25, r1
    155e:	81 f0       	breq	.+32     	; 0x1580 <Set_GroupDir+0x6c>
    1560:	13 c0       	rjmp	.+38     	; 0x1588 <Set_GroupDir+0x74>
	{
	case PORT_A:
		DDRA = value;
    1562:	ea e3       	ldi	r30, 0x3A	; 58
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	80 83       	st	Z, r24
    156a:	0e c0       	rjmp	.+28     	; 0x1588 <Set_GroupDir+0x74>
		break;
	case PORT_B:
		DDRB = value;
    156c:	e7 e3       	ldi	r30, 0x37	; 55
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	80 83       	st	Z, r24
    1574:	09 c0       	rjmp	.+18     	; 0x1588 <Set_GroupDir+0x74>
		break;
	case PORT_C:
		DDRC = value;
    1576:	e4 e3       	ldi	r30, 0x34	; 52
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	80 83       	st	Z, r24
    157e:	04 c0       	rjmp	.+8      	; 0x1588 <Set_GroupDir+0x74>
		break;
	case PORT_D:
		DDRD = value;
    1580:	e1 e3       	ldi	r30, 0x31	; 49
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	80 83       	st	Z, r24
		break;
	}
}
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <Set_GroupLevel>:

void Set_GroupLevel (GroupName_t group, u8 value)							// Function to set level of group of pins
{
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	00 d0       	rcall	.+0      	; 0x159c <Set_GroupLevel+0x6>
    159c:	00 d0       	rcall	.+0      	; 0x159e <Set_GroupLevel+0x8>
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	89 83       	std	Y+1, r24	; 0x01
    15a4:	6a 83       	std	Y+2, r22	; 0x02
	switch (group)
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	3c 83       	std	Y+4, r19	; 0x04
    15ae:	2b 83       	std	Y+3, r18	; 0x03
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	91 05       	cpc	r25, r1
    15b8:	d1 f0       	breq	.+52     	; 0x15ee <Set_GroupLevel+0x58>
    15ba:	2b 81       	ldd	r18, Y+3	; 0x03
    15bc:	3c 81       	ldd	r19, Y+4	; 0x04
    15be:	22 30       	cpi	r18, 0x02	; 2
    15c0:	31 05       	cpc	r19, r1
    15c2:	2c f4       	brge	.+10     	; 0x15ce <Set_GroupLevel+0x38>
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	9c 81       	ldd	r25, Y+4	; 0x04
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	61 f0       	breq	.+24     	; 0x15e4 <Set_GroupLevel+0x4e>
    15cc:	1e c0       	rjmp	.+60     	; 0x160a <Set_GroupLevel+0x74>
    15ce:	2b 81       	ldd	r18, Y+3	; 0x03
    15d0:	3c 81       	ldd	r19, Y+4	; 0x04
    15d2:	22 30       	cpi	r18, 0x02	; 2
    15d4:	31 05       	cpc	r19, r1
    15d6:	81 f0       	breq	.+32     	; 0x15f8 <Set_GroupLevel+0x62>
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	9c 81       	ldd	r25, Y+4	; 0x04
    15dc:	83 30       	cpi	r24, 0x03	; 3
    15de:	91 05       	cpc	r25, r1
    15e0:	81 f0       	breq	.+32     	; 0x1602 <Set_GroupLevel+0x6c>
    15e2:	13 c0       	rjmp	.+38     	; 0x160a <Set_GroupLevel+0x74>
	{
	case PORT_A:
		PORTA = value;
    15e4:	eb e3       	ldi	r30, 0x3B	; 59
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	80 83       	st	Z, r24
    15ec:	0e c0       	rjmp	.+28     	; 0x160a <Set_GroupLevel+0x74>
		break;
	case PORT_B:
		PORTB = value;
    15ee:	e8 e3       	ldi	r30, 0x38	; 56
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	80 83       	st	Z, r24
    15f6:	09 c0       	rjmp	.+18     	; 0x160a <Set_GroupLevel+0x74>
		break;
	case PORT_C:
		PORTC = value;
    15f8:	e5 e3       	ldi	r30, 0x35	; 53
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	80 83       	st	Z, r24
    1600:	04 c0       	rjmp	.+8      	; 0x160a <Set_GroupLevel+0x74>
		break;
	case PORT_D:
		PORTD = value;
    1602:	e2 e3       	ldi	r30, 0x32	; 50
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	80 83       	st	Z, r24
		break;
	}
}
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <ADC_Init>:
 *      Author: Hello
 */
#include "ADC.h"

void ADC_Init(void)
{
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
 // AREF = AVcc
 ADMUX = (1<<REFS0);
    1620:	e7 e2       	ldi	r30, 0x27	; 39
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 e4       	ldi	r24, 0x40	; 64
    1626:	80 83       	st	Z, r24
 // ADC Enable and prescaler of 128

 ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
    1628:	e6 e2       	ldi	r30, 0x26	; 38
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	87 e8       	ldi	r24, 0x87	; 135
    162e:	80 83       	st	Z, r24
}
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <ADC_readChannel>:
u16 ADC_readChannel (u8 channel)
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	0f 92       	push	r0
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	89 83       	std	Y+1, r24	; 0x01
	// select the corresponding channel 0~7

	channel &= 0b00000111;  // AND operation with 7
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	87 70       	andi	r24, 0x07	; 7
    1646:	89 83       	std	Y+1, r24	; 0x01
	 ADMUX = (ADMUX & 0xF8)|channel;
    1648:	a7 e2       	ldi	r26, 0x27	; 39
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e7 e2       	ldi	r30, 0x27	; 39
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	98 2f       	mov	r25, r24
    1654:	98 7f       	andi	r25, 0xF8	; 248
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	89 2b       	or	r24, r25
    165a:	8c 93       	st	X, r24
	 // start single conversion
	 // write '1' to ADSC
	 ADCSRA |= (1<<ADSC);
    165c:	a6 e2       	ldi	r26, 0x26	; 38
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e6 e2       	ldi	r30, 0x26	; 38
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	80 64       	ori	r24, 0x40	; 64
    1668:	8c 93       	st	X, r24

	 // wait for conversion to complete
	 // ADSC becomes '0' again
	 while(ADCSRA & (1<<ADSC));
    166a:	e6 e2       	ldi	r30, 0x26	; 38
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	88 2f       	mov	r24, r24
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	80 74       	andi	r24, 0x40	; 64
    1676:	90 70       	andi	r25, 0x00	; 0
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	b9 f7       	brne	.-18     	; 0x166a <ADC_readChannel+0x34>
	 return (ADC);
    167c:	e4 e2       	ldi	r30, 0x24	; 36
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	91 81       	ldd	r25, Z+1	; 0x01
	}
    1684:	0f 90       	pop	r0
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	08 95       	ret

0000168c <Keypad_GetPressedKey>:

/**************************************************************************************************/
/****************************************Function Definition***************************************/

u8 Keypad_GetPressedKey (void)
{
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	00 d0       	rcall	.+0      	; 0x1692 <Keypad_GetPressedKey+0x6>
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
	u8 row, col;
	while(1)
	{
		for (col = 0; col < N_COL; col++)
    1696:	19 82       	std	Y+1, r1	; 0x01
    1698:	4c c0       	rjmp	.+152    	; 0x1732 <Keypad_GetPressedKey+0xa6>
		{
			KEYPAD_PORT_DIR = (0b00010000<< col);
    169a:	ea e3       	ldi	r30, 0x3A	; 58
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	89 81       	ldd	r24, Y+1	; 0x01
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	80 e1       	ldi	r24, 0x10	; 16
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <Keypad_GetPressedKey+0x22>
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	2a 95       	dec	r18
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <Keypad_GetPressedKey+0x1e>
    16b2:	80 83       	st	Z, r24

			KEYPAD_PORT_OUT = (~(0b00010000<< col));
    16b4:	eb e3       	ldi	r30, 0x3B	; 59
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	80 e1       	ldi	r24, 0x10	; 16
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	02 2e       	mov	r0, r18
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <Keypad_GetPressedKey+0x3e>
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	0a 94       	dec	r0
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <Keypad_GetPressedKey+0x3a>
    16ce:	80 95       	com	r24
    16d0:	80 83       	st	Z, r24
			for (row = 0; row < N_ROW; row++)
    16d2:	1a 82       	std	Y+2, r1	; 0x02
    16d4:	28 c0       	rjmp	.+80     	; 0x1726 <Keypad_GetPressedKey+0x9a>
			{
				if (BIT_IS_CLEAR(KEYPAD_PORT_IN,row))
    16d6:	e9 e3       	ldi	r30, 0x39	; 57
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	88 2f       	mov	r24, r24
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	a9 01       	movw	r20, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <Keypad_GetPressedKey+0x62>
    16ea:	55 95       	asr	r21
    16ec:	47 95       	ror	r20
    16ee:	8a 95       	dec	r24
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <Keypad_GetPressedKey+0x5e>
    16f2:	ca 01       	movw	r24, r20
    16f4:	81 70       	andi	r24, 0x01	; 1
    16f6:	90 70       	andi	r25, 0x00	; 0
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	91 f4       	brne	.+36     	; 0x1720 <Keypad_GetPressedKey+0x94>
					#if (N_COL == 3)

					return Keypad_4x3_adjustKeyNumber (((row*N_COL)+col+1));
					#elif (N_COL == 4)

					return Keypad_4x4_adjustKeyNumber (((row*N_COL)+col+1));
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	88 2f       	mov	r24, r24
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	98 2f       	mov	r25, r24
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	89 0f       	add	r24, r25
    1710:	8f 5f       	subi	r24, 0xFF	; 255
    1712:	0e 94 9e 0b 	call	0x173c	; 0x173c <Keypad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret
		for (col = 0; col < N_COL; col++)
		{
			KEYPAD_PORT_DIR = (0b00010000<< col);

			KEYPAD_PORT_OUT = (~(0b00010000<< col));
			for (row = 0; row < N_ROW; row++)
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	8f 5f       	subi	r24, 0xFF	; 255
    1724:	8a 83       	std	Y+2, r24	; 0x02
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	84 30       	cpi	r24, 0x04	; 4
    172a:	a8 f2       	brcs	.-86     	; 0x16d6 <Keypad_GetPressedKey+0x4a>
u8 Keypad_GetPressedKey (void)
{
	u8 row, col;
	while(1)
	{
		for (col = 0; col < N_COL; col++)
    172c:	89 81       	ldd	r24, Y+1	; 0x01
    172e:	8f 5f       	subi	r24, 0xFF	; 255
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	84 30       	cpi	r24, 0x04	; 4
    1736:	08 f4       	brcc	.+2      	; 0x173a <Keypad_GetPressedKey+0xae>
    1738:	b0 cf       	rjmp	.-160    	; 0x169a <Keypad_GetPressedKey+0xe>
    173a:	ad cf       	rjmp	.-166    	; 0x1696 <Keypad_GetPressedKey+0xa>

0000173c <Keypad_4x4_adjustKeyNumber>:


#elif (N_COL == 4)

static u8 Keypad_4x4_adjustKeyNumber (u8 button_number)
{
    173c:	df 93       	push	r29
    173e:	cf 93       	push	r28
    1740:	00 d0       	rcall	.+0      	; 0x1742 <Keypad_4x4_adjustKeyNumber+0x6>
    1742:	00 d0       	rcall	.+0      	; 0x1744 <Keypad_4x4_adjustKeyNumber+0x8>
    1744:	0f 92       	push	r0
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	89 83       	std	Y+1, r24	; 0x01
	switch (button_number)
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	3c 83       	std	Y+4, r19	; 0x04
    1754:	2b 83       	std	Y+3, r18	; 0x03
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	88 30       	cpi	r24, 0x08	; 8
    175c:	91 05       	cpc	r25, r1
    175e:	09 f4       	brne	.+2      	; 0x1762 <Keypad_4x4_adjustKeyNumber+0x26>
    1760:	70 c0       	rjmp	.+224    	; 0x1842 <Keypad_4x4_adjustKeyNumber+0x106>
    1762:	2b 81       	ldd	r18, Y+3	; 0x03
    1764:	3c 81       	ldd	r19, Y+4	; 0x04
    1766:	29 30       	cpi	r18, 0x09	; 9
    1768:	31 05       	cpc	r19, r1
    176a:	5c f5       	brge	.+86     	; 0x17c2 <Keypad_4x4_adjustKeyNumber+0x86>
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	9c 81       	ldd	r25, Y+4	; 0x04
    1770:	84 30       	cpi	r24, 0x04	; 4
    1772:	91 05       	cpc	r25, r1
    1774:	09 f4       	brne	.+2      	; 0x1778 <Keypad_4x4_adjustKeyNumber+0x3c>
    1776:	59 c0       	rjmp	.+178    	; 0x182a <Keypad_4x4_adjustKeyNumber+0xee>
    1778:	2b 81       	ldd	r18, Y+3	; 0x03
    177a:	3c 81       	ldd	r19, Y+4	; 0x04
    177c:	25 30       	cpi	r18, 0x05	; 5
    177e:	31 05       	cpc	r19, r1
    1780:	9c f4       	brge	.+38     	; 0x17a8 <Keypad_4x4_adjustKeyNumber+0x6c>
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	9c 81       	ldd	r25, Y+4	; 0x04
    1786:	82 30       	cpi	r24, 0x02	; 2
    1788:	91 05       	cpc	r25, r1
    178a:	09 f4       	brne	.+2      	; 0x178e <Keypad_4x4_adjustKeyNumber+0x52>
    178c:	48 c0       	rjmp	.+144    	; 0x181e <Keypad_4x4_adjustKeyNumber+0xe2>
    178e:	2b 81       	ldd	r18, Y+3	; 0x03
    1790:	3c 81       	ldd	r19, Y+4	; 0x04
    1792:	23 30       	cpi	r18, 0x03	; 3
    1794:	31 05       	cpc	r19, r1
    1796:	0c f0       	brlt	.+2      	; 0x179a <Keypad_4x4_adjustKeyNumber+0x5e>
    1798:	45 c0       	rjmp	.+138    	; 0x1824 <Keypad_4x4_adjustKeyNumber+0xe8>
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	9c 81       	ldd	r25, Y+4	; 0x04
    179e:	81 30       	cpi	r24, 0x01	; 1
    17a0:	91 05       	cpc	r25, r1
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <Keypad_4x4_adjustKeyNumber+0x6a>
    17a4:	39 c0       	rjmp	.+114    	; 0x1818 <Keypad_4x4_adjustKeyNumber+0xdc>
    17a6:	67 c0       	rjmp	.+206    	; 0x1876 <Keypad_4x4_adjustKeyNumber+0x13a>
    17a8:	2b 81       	ldd	r18, Y+3	; 0x03
    17aa:	3c 81       	ldd	r19, Y+4	; 0x04
    17ac:	26 30       	cpi	r18, 0x06	; 6
    17ae:	31 05       	cpc	r19, r1
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <Keypad_4x4_adjustKeyNumber+0x78>
    17b2:	41 c0       	rjmp	.+130    	; 0x1836 <Keypad_4x4_adjustKeyNumber+0xfa>
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	9c 81       	ldd	r25, Y+4	; 0x04
    17b8:	87 30       	cpi	r24, 0x07	; 7
    17ba:	91 05       	cpc	r25, r1
    17bc:	0c f0       	brlt	.+2      	; 0x17c0 <Keypad_4x4_adjustKeyNumber+0x84>
    17be:	3e c0       	rjmp	.+124    	; 0x183c <Keypad_4x4_adjustKeyNumber+0x100>
    17c0:	37 c0       	rjmp	.+110    	; 0x1830 <Keypad_4x4_adjustKeyNumber+0xf4>
    17c2:	2b 81       	ldd	r18, Y+3	; 0x03
    17c4:	3c 81       	ldd	r19, Y+4	; 0x04
    17c6:	2c 30       	cpi	r18, 0x0C	; 12
    17c8:	31 05       	cpc	r19, r1
    17ca:	09 f4       	brne	.+2      	; 0x17ce <Keypad_4x4_adjustKeyNumber+0x92>
    17cc:	46 c0       	rjmp	.+140    	; 0x185a <Keypad_4x4_adjustKeyNumber+0x11e>
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	8d 30       	cpi	r24, 0x0D	; 13
    17d4:	91 05       	cpc	r25, r1
    17d6:	5c f4       	brge	.+22     	; 0x17ee <Keypad_4x4_adjustKeyNumber+0xb2>
    17d8:	2b 81       	ldd	r18, Y+3	; 0x03
    17da:	3c 81       	ldd	r19, Y+4	; 0x04
    17dc:	2a 30       	cpi	r18, 0x0A	; 10
    17de:	31 05       	cpc	r19, r1
    17e0:	b1 f1       	breq	.+108    	; 0x184e <Keypad_4x4_adjustKeyNumber+0x112>
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	9c 81       	ldd	r25, Y+4	; 0x04
    17e6:	8b 30       	cpi	r24, 0x0B	; 11
    17e8:	91 05       	cpc	r25, r1
    17ea:	a4 f5       	brge	.+104    	; 0x1854 <Keypad_4x4_adjustKeyNumber+0x118>
    17ec:	2d c0       	rjmp	.+90     	; 0x1848 <Keypad_4x4_adjustKeyNumber+0x10c>
    17ee:	2b 81       	ldd	r18, Y+3	; 0x03
    17f0:	3c 81       	ldd	r19, Y+4	; 0x04
    17f2:	2e 30       	cpi	r18, 0x0E	; 14
    17f4:	31 05       	cpc	r19, r1
    17f6:	b9 f1       	breq	.+110    	; 0x1866 <Keypad_4x4_adjustKeyNumber+0x12a>
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	9c 81       	ldd	r25, Y+4	; 0x04
    17fc:	8e 30       	cpi	r24, 0x0E	; 14
    17fe:	91 05       	cpc	r25, r1
    1800:	7c f1       	brlt	.+94     	; 0x1860 <Keypad_4x4_adjustKeyNumber+0x124>
    1802:	2b 81       	ldd	r18, Y+3	; 0x03
    1804:	3c 81       	ldd	r19, Y+4	; 0x04
    1806:	2f 30       	cpi	r18, 0x0F	; 15
    1808:	31 05       	cpc	r19, r1
    180a:	79 f1       	breq	.+94     	; 0x186a <Keypad_4x4_adjustKeyNumber+0x12e>
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	9c 81       	ldd	r25, Y+4	; 0x04
    1810:	80 31       	cpi	r24, 0x10	; 16
    1812:	91 05       	cpc	r25, r1
    1814:	69 f1       	breq	.+90     	; 0x1870 <Keypad_4x4_adjustKeyNumber+0x134>
    1816:	2f c0       	rjmp	.+94     	; 0x1876 <Keypad_4x4_adjustKeyNumber+0x13a>
	{
	case 1:		return 7;
    1818:	97 e0       	ldi	r25, 0x07	; 7
    181a:	9a 83       	std	Y+2, r25	; 0x02
    181c:	2d c0       	rjmp	.+90     	; 0x1878 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 2:		return 8;
    181e:	28 e0       	ldi	r18, 0x08	; 8
    1820:	2a 83       	std	Y+2, r18	; 0x02
    1822:	2a c0       	rjmp	.+84     	; 0x1878 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 3:		return 9;
    1824:	39 e0       	ldi	r19, 0x09	; 9
    1826:	3a 83       	std	Y+2, r19	; 0x02
    1828:	27 c0       	rjmp	.+78     	; 0x1878 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 4:		return '/';
    182a:	8f e2       	ldi	r24, 0x2F	; 47
    182c:	8a 83       	std	Y+2, r24	; 0x02
    182e:	24 c0       	rjmp	.+72     	; 0x1878 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 5:		return 4;
    1830:	94 e0       	ldi	r25, 0x04	; 4
    1832:	9a 83       	std	Y+2, r25	; 0x02
    1834:	21 c0       	rjmp	.+66     	; 0x1878 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 6:		return 5;
    1836:	25 e0       	ldi	r18, 0x05	; 5
    1838:	2a 83       	std	Y+2, r18	; 0x02
    183a:	1e c0       	rjmp	.+60     	; 0x1878 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 7:		return 6;
    183c:	36 e0       	ldi	r19, 0x06	; 6
    183e:	3a 83       	std	Y+2, r19	; 0x02
    1840:	1b c0       	rjmp	.+54     	; 0x1878 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 8:		return '*';
    1842:	8a e2       	ldi	r24, 0x2A	; 42
    1844:	8a 83       	std	Y+2, r24	; 0x02
    1846:	18 c0       	rjmp	.+48     	; 0x1878 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 9:		return 1;
    1848:	91 e0       	ldi	r25, 0x01	; 1
    184a:	9a 83       	std	Y+2, r25	; 0x02
    184c:	15 c0       	rjmp	.+42     	; 0x1878 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 10:	return 2;
    184e:	22 e0       	ldi	r18, 0x02	; 2
    1850:	2a 83       	std	Y+2, r18	; 0x02
    1852:	12 c0       	rjmp	.+36     	; 0x1878 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 11:	return 3;
    1854:	33 e0       	ldi	r19, 0x03	; 3
    1856:	3a 83       	std	Y+2, r19	; 0x02
    1858:	0f c0       	rjmp	.+30     	; 0x1878 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 12:	return '-';
    185a:	8d e2       	ldi	r24, 0x2D	; 45
    185c:	8a 83       	std	Y+2, r24	; 0x02
    185e:	0c c0       	rjmp	.+24     	; 0x1878 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 13:	return 'c';
    1860:	93 e6       	ldi	r25, 0x63	; 99
    1862:	9a 83       	std	Y+2, r25	; 0x02
    1864:	09 c0       	rjmp	.+18     	; 0x1878 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 14:	return 0;
    1866:	1a 82       	std	Y+2, r1	; 0x02
    1868:	07 c0       	rjmp	.+14     	; 0x1878 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 15:	return '=';
    186a:	2d e3       	ldi	r18, 0x3D	; 61
    186c:	2a 83       	std	Y+2, r18	; 0x02
    186e:	04 c0       	rjmp	.+8      	; 0x1878 <Keypad_4x4_adjustKeyNumber+0x13c>
	break;
	case 16:	return '+';
    1870:	3b e2       	ldi	r19, 0x2B	; 43
    1872:	3a 83       	std	Y+2, r19	; 0x02
    1874:	01 c0       	rjmp	.+2      	; 0x1878 <Keypad_4x4_adjustKeyNumber+0x13c>
    1876:	02 c0       	rjmp	.+4      	; 0x187c <Keypad_4x4_adjustKeyNumber+0x140>
	break;
	}
}
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	8d 83       	std	Y+5, r24	; 0x05
    187c:	8d 81       	ldd	r24, Y+5	; 0x05
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <LCD_Init>:
#include <stdio.h>
/**************************************************************************************************/
/****************************************Function Definition***************************************/

void LCD_Init (void)				// Function to initialize the LCD
{
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	e8 97       	sbiw	r28, 0x38	; 56
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
	Set_GroupDir (LCD_DATA_PORT_DIR,0xFF);			//Set PORTC as o/p port
    18a2:	e4 e3       	ldi	r30, 0x34	; 52
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	6f ef       	ldi	r22, 0xFF	; 255
    18aa:	0e 94 8a 0a 	call	0x1514	; 0x1514 <Set_GroupDir>
	LCD_CTRL_PORT_DIR = (1<<EN) | (1<<RS) | (1<<RW);//Set RS, RW, E pins as o/p port
    18ae:	e1 e3       	ldi	r30, 0x31	; 49
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	87 e0       	ldi	r24, 0x07	; 7
    18b4:	80 83       	st	Z, r24
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	a8 e4       	ldi	r26, 0x48	; 72
    18bc:	b2 e4       	ldi	r27, 0x42	; 66
    18be:	8d ab       	std	Y+53, r24	; 0x35
    18c0:	9e ab       	std	Y+54, r25	; 0x36
    18c2:	af ab       	std	Y+55, r26	; 0x37
    18c4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c6:	6d a9       	ldd	r22, Y+53	; 0x35
    18c8:	7e a9       	ldd	r23, Y+54	; 0x36
    18ca:	8f a9       	ldd	r24, Y+55	; 0x37
    18cc:	98 ad       	ldd	r25, Y+56	; 0x38
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	4a e7       	ldi	r20, 0x7A	; 122
    18d4:	53 e4       	ldi	r21, 0x43	; 67
    18d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	89 ab       	std	Y+49, r24	; 0x31
    18e0:	9a ab       	std	Y+50, r25	; 0x32
    18e2:	ab ab       	std	Y+51, r26	; 0x33
    18e4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18e6:	69 a9       	ldd	r22, Y+49	; 0x31
    18e8:	7a a9       	ldd	r23, Y+50	; 0x32
    18ea:	8b a9       	ldd	r24, Y+51	; 0x33
    18ec:	9c a9       	ldd	r25, Y+52	; 0x34
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	40 e8       	ldi	r20, 0x80	; 128
    18f4:	5f e3       	ldi	r21, 0x3F	; 63
    18f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18fa:	88 23       	and	r24, r24
    18fc:	2c f4       	brge	.+10     	; 0x1908 <LCD_Init+0x7a>
		__ticks = 1;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	98 ab       	std	Y+48, r25	; 0x30
    1904:	8f a7       	std	Y+47, r24	; 0x2f
    1906:	3f c0       	rjmp	.+126    	; 0x1986 <LCD_Init+0xf8>
	else if (__tmp > 65535)
    1908:	69 a9       	ldd	r22, Y+49	; 0x31
    190a:	7a a9       	ldd	r23, Y+50	; 0x32
    190c:	8b a9       	ldd	r24, Y+51	; 0x33
    190e:	9c a9       	ldd	r25, Y+52	; 0x34
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	3f ef       	ldi	r19, 0xFF	; 255
    1914:	4f e7       	ldi	r20, 0x7F	; 127
    1916:	57 e4       	ldi	r21, 0x47	; 71
    1918:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    191c:	18 16       	cp	r1, r24
    191e:	4c f5       	brge	.+82     	; 0x1972 <LCD_Init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1920:	6d a9       	ldd	r22, Y+53	; 0x35
    1922:	7e a9       	ldd	r23, Y+54	; 0x36
    1924:	8f a9       	ldd	r24, Y+55	; 0x37
    1926:	98 ad       	ldd	r25, Y+56	; 0x38
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e2       	ldi	r20, 0x20	; 32
    192e:	51 e4       	ldi	r21, 0x41	; 65
    1930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	bc 01       	movw	r22, r24
    193a:	cd 01       	movw	r24, r26
    193c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	98 ab       	std	Y+48, r25	; 0x30
    1946:	8f a7       	std	Y+47, r24	; 0x2f
    1948:	0f c0       	rjmp	.+30     	; 0x1968 <LCD_Init+0xda>
    194a:	89 e1       	ldi	r24, 0x19	; 25
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	9e a7       	std	Y+46, r25	; 0x2e
    1950:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1952:	8d a5       	ldd	r24, Y+45	; 0x2d
    1954:	9e a5       	ldd	r25, Y+46	; 0x2e
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <LCD_Init+0xc8>
    195a:	9e a7       	std	Y+46, r25	; 0x2e
    195c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1960:	98 a9       	ldd	r25, Y+48	; 0x30
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	98 ab       	std	Y+48, r25	; 0x30
    1966:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1968:	8f a5       	ldd	r24, Y+47	; 0x2f
    196a:	98 a9       	ldd	r25, Y+48	; 0x30
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	69 f7       	brne	.-38     	; 0x194a <LCD_Init+0xbc>
    1970:	14 c0       	rjmp	.+40     	; 0x199a <LCD_Init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1972:	69 a9       	ldd	r22, Y+49	; 0x31
    1974:	7a a9       	ldd	r23, Y+50	; 0x32
    1976:	8b a9       	ldd	r24, Y+51	; 0x33
    1978:	9c a9       	ldd	r25, Y+52	; 0x34
    197a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	98 ab       	std	Y+48, r25	; 0x30
    1984:	8f a7       	std	Y+47, r24	; 0x2f
    1986:	8f a5       	ldd	r24, Y+47	; 0x2f
    1988:	98 a9       	ldd	r25, Y+48	; 0x30
    198a:	9c a7       	std	Y+44, r25	; 0x2c
    198c:	8b a7       	std	Y+43, r24	; 0x2b
    198e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1990:	9c a5       	ldd	r25, Y+44	; 0x2c
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	f1 f7       	brne	.-4      	; 0x1992 <LCD_Init+0x104>
    1996:	9c a7       	std	Y+44, r25	; 0x2c
    1998:	8b a7       	std	Y+43, r24	; 0x2b
	// OR  Set_GroupDir (LCD_CTRL_PORT,0x6F);
	_delay_ms(50); 								//Delay 50ms before function initialization
	Send_CMD (TWO_LINE_LCD_EIGHT_BIT_MODE);		//Set LCD mode as 8-bit mode, 2-lines, 5*8 Dots
    199a:	88 e3       	ldi	r24, 0x38	; 56
    199c:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <Send_CMD>
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	a0 e8       	ldi	r26, 0x80	; 128
    19a6:	bf e3       	ldi	r27, 0x3F	; 63
    19a8:	8f a3       	std	Y+39, r24	; 0x27
    19aa:	98 a7       	std	Y+40, r25	; 0x28
    19ac:	a9 a7       	std	Y+41, r26	; 0x29
    19ae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b0:	6f a1       	ldd	r22, Y+39	; 0x27
    19b2:	78 a5       	ldd	r23, Y+40	; 0x28
    19b4:	89 a5       	ldd	r24, Y+41	; 0x29
    19b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	4a e7       	ldi	r20, 0x7A	; 122
    19be:	53 e4       	ldi	r21, 0x43	; 67
    19c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	8b a3       	std	Y+35, r24	; 0x23
    19ca:	9c a3       	std	Y+36, r25	; 0x24
    19cc:	ad a3       	std	Y+37, r26	; 0x25
    19ce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19d0:	6b a1       	ldd	r22, Y+35	; 0x23
    19d2:	7c a1       	ldd	r23, Y+36	; 0x24
    19d4:	8d a1       	ldd	r24, Y+37	; 0x25
    19d6:	9e a1       	ldd	r25, Y+38	; 0x26
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e8       	ldi	r20, 0x80	; 128
    19de:	5f e3       	ldi	r21, 0x3F	; 63
    19e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19e4:	88 23       	and	r24, r24
    19e6:	2c f4       	brge	.+10     	; 0x19f2 <LCD_Init+0x164>
		__ticks = 1;
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	9a a3       	std	Y+34, r25	; 0x22
    19ee:	89 a3       	std	Y+33, r24	; 0x21
    19f0:	3f c0       	rjmp	.+126    	; 0x1a70 <LCD_Init+0x1e2>
	else if (__tmp > 65535)
    19f2:	6b a1       	ldd	r22, Y+35	; 0x23
    19f4:	7c a1       	ldd	r23, Y+36	; 0x24
    19f6:	8d a1       	ldd	r24, Y+37	; 0x25
    19f8:	9e a1       	ldd	r25, Y+38	; 0x26
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	3f ef       	ldi	r19, 0xFF	; 255
    19fe:	4f e7       	ldi	r20, 0x7F	; 127
    1a00:	57 e4       	ldi	r21, 0x47	; 71
    1a02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a06:	18 16       	cp	r1, r24
    1a08:	4c f5       	brge	.+82     	; 0x1a5c <LCD_Init+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a0c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a0e:	89 a5       	ldd	r24, Y+41	; 0x29
    1a10:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	40 e2       	ldi	r20, 0x20	; 32
    1a18:	51 e4       	ldi	r21, 0x41	; 65
    1a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	bc 01       	movw	r22, r24
    1a24:	cd 01       	movw	r24, r26
    1a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	9a a3       	std	Y+34, r25	; 0x22
    1a30:	89 a3       	std	Y+33, r24	; 0x21
    1a32:	0f c0       	rjmp	.+30     	; 0x1a52 <LCD_Init+0x1c4>
    1a34:	89 e1       	ldi	r24, 0x19	; 25
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	98 a3       	std	Y+32, r25	; 0x20
    1a3a:	8f 8f       	std	Y+31, r24	; 0x1f
    1a3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a3e:	98 a1       	ldd	r25, Y+32	; 0x20
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	f1 f7       	brne	.-4      	; 0x1a40 <LCD_Init+0x1b2>
    1a44:	98 a3       	std	Y+32, r25	; 0x20
    1a46:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a48:	89 a1       	ldd	r24, Y+33	; 0x21
    1a4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	9a a3       	std	Y+34, r25	; 0x22
    1a50:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a52:	89 a1       	ldd	r24, Y+33	; 0x21
    1a54:	9a a1       	ldd	r25, Y+34	; 0x22
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	69 f7       	brne	.-38     	; 0x1a34 <LCD_Init+0x1a6>
    1a5a:	14 c0       	rjmp	.+40     	; 0x1a84 <LCD_Init+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a60:	8d a1       	ldd	r24, Y+37	; 0x25
    1a62:	9e a1       	ldd	r25, Y+38	; 0x26
    1a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	9a a3       	std	Y+34, r25	; 0x22
    1a6e:	89 a3       	std	Y+33, r24	; 0x21
    1a70:	89 a1       	ldd	r24, Y+33	; 0x21
    1a72:	9a a1       	ldd	r25, Y+34	; 0x22
    1a74:	9e 8f       	std	Y+30, r25	; 0x1e
    1a76:	8d 8f       	std	Y+29, r24	; 0x1d
    1a78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	f1 f7       	brne	.-4      	; 0x1a7c <LCD_Init+0x1ee>
    1a80:	9e 8f       	std	Y+30, r25	; 0x1e
    1a82:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Send_CMD (CURSOR_OFF);						//Choose Cursor as off
    1a84:	8c e0       	ldi	r24, 0x0C	; 12
    1a86:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <Send_CMD>
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	a0 e8       	ldi	r26, 0x80	; 128
    1a90:	bf e3       	ldi	r27, 0x3F	; 63
    1a92:	89 8f       	std	Y+25, r24	; 0x19
    1a94:	9a 8f       	std	Y+26, r25	; 0x1a
    1a96:	ab 8f       	std	Y+27, r26	; 0x1b
    1a98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aa0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	4a e7       	ldi	r20, 0x7A	; 122
    1aa8:	53 e4       	ldi	r21, 0x43	; 67
    1aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	8d 8b       	std	Y+21, r24	; 0x15
    1ab4:	9e 8b       	std	Y+22, r25	; 0x16
    1ab6:	af 8b       	std	Y+23, r26	; 0x17
    1ab8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1aba:	6d 89       	ldd	r22, Y+21	; 0x15
    1abc:	7e 89       	ldd	r23, Y+22	; 0x16
    1abe:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e8       	ldi	r20, 0x80	; 128
    1ac8:	5f e3       	ldi	r21, 0x3F	; 63
    1aca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ace:	88 23       	and	r24, r24
    1ad0:	2c f4       	brge	.+10     	; 0x1adc <LCD_Init+0x24e>
		__ticks = 1;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	9c 8b       	std	Y+20, r25	; 0x14
    1ad8:	8b 8b       	std	Y+19, r24	; 0x13
    1ada:	3f c0       	rjmp	.+126    	; 0x1b5a <LCD_Init+0x2cc>
	else if (__tmp > 65535)
    1adc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ade:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	3f ef       	ldi	r19, 0xFF	; 255
    1ae8:	4f e7       	ldi	r20, 0x7F	; 127
    1aea:	57 e4       	ldi	r21, 0x47	; 71
    1aec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1af0:	18 16       	cp	r1, r24
    1af2:	4c f5       	brge	.+82     	; 0x1b46 <LCD_Init+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af4:	69 8d       	ldd	r22, Y+25	; 0x19
    1af6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1af8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1afa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e2       	ldi	r20, 0x20	; 32
    1b02:	51 e4       	ldi	r21, 0x41	; 65
    1b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	9c 8b       	std	Y+20, r25	; 0x14
    1b1a:	8b 8b       	std	Y+19, r24	; 0x13
    1b1c:	0f c0       	rjmp	.+30     	; 0x1b3c <LCD_Init+0x2ae>
    1b1e:	89 e1       	ldi	r24, 0x19	; 25
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	9a 8b       	std	Y+18, r25	; 0x12
    1b24:	89 8b       	std	Y+17, r24	; 0x11
    1b26:	89 89       	ldd	r24, Y+17	; 0x11
    1b28:	9a 89       	ldd	r25, Y+18	; 0x12
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <LCD_Init+0x29c>
    1b2e:	9a 8b       	std	Y+18, r25	; 0x12
    1b30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b32:	8b 89       	ldd	r24, Y+19	; 0x13
    1b34:	9c 89       	ldd	r25, Y+20	; 0x14
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	9c 8b       	std	Y+20, r25	; 0x14
    1b3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	69 f7       	brne	.-38     	; 0x1b1e <LCD_Init+0x290>
    1b44:	14 c0       	rjmp	.+40     	; 0x1b6e <LCD_Init+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b46:	6d 89       	ldd	r22, Y+21	; 0x15
    1b48:	7e 89       	ldd	r23, Y+22	; 0x16
    1b4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	9c 8b       	std	Y+20, r25	; 0x14
    1b58:	8b 8b       	std	Y+19, r24	; 0x13
    1b5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b5e:	98 8b       	std	Y+16, r25	; 0x10
    1b60:	8f 87       	std	Y+15, r24	; 0x0f
    1b62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b64:	98 89       	ldd	r25, Y+16	; 0x10
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	f1 f7       	brne	.-4      	; 0x1b66 <LCD_Init+0x2d8>
    1b6a:	98 8b       	std	Y+16, r25	; 0x10
    1b6c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Send_CMD (CLEAR_COMMAND);					//Clear LCD at initialization
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <Send_CMD>
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	a0 e0       	ldi	r26, 0x00	; 0
    1b7a:	b0 e4       	ldi	r27, 0x40	; 64
    1b7c:	8b 87       	std	Y+11, r24	; 0x0b
    1b7e:	9c 87       	std	Y+12, r25	; 0x0c
    1b80:	ad 87       	std	Y+13, r26	; 0x0d
    1b82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	4a e7       	ldi	r20, 0x7A	; 122
    1b92:	53 e4       	ldi	r21, 0x43	; 67
    1b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	8f 83       	std	Y+7, r24	; 0x07
    1b9e:	98 87       	std	Y+8, r25	; 0x08
    1ba0:	a9 87       	std	Y+9, r26	; 0x09
    1ba2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba6:	78 85       	ldd	r23, Y+8	; 0x08
    1ba8:	89 85       	ldd	r24, Y+9	; 0x09
    1baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	40 e8       	ldi	r20, 0x80	; 128
    1bb2:	5f e3       	ldi	r21, 0x3F	; 63
    1bb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb8:	88 23       	and	r24, r24
    1bba:	2c f4       	brge	.+10     	; 0x1bc6 <LCD_Init+0x338>
		__ticks = 1;
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	9e 83       	std	Y+6, r25	; 0x06
    1bc2:	8d 83       	std	Y+5, r24	; 0x05
    1bc4:	3f c0       	rjmp	.+126    	; 0x1c44 <LCD_Init+0x3b6>
	else if (__tmp > 65535)
    1bc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc8:	78 85       	ldd	r23, Y+8	; 0x08
    1bca:	89 85       	ldd	r24, Y+9	; 0x09
    1bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	3f ef       	ldi	r19, 0xFF	; 255
    1bd2:	4f e7       	ldi	r20, 0x7F	; 127
    1bd4:	57 e4       	ldi	r21, 0x47	; 71
    1bd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bda:	18 16       	cp	r1, r24
    1bdc:	4c f5       	brge	.+82     	; 0x1c30 <LCD_Init+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bde:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1be2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1be4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e2       	ldi	r20, 0x20	; 32
    1bec:	51 e4       	ldi	r21, 0x41	; 65
    1bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	bc 01       	movw	r22, r24
    1bf8:	cd 01       	movw	r24, r26
    1bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	9e 83       	std	Y+6, r25	; 0x06
    1c04:	8d 83       	std	Y+5, r24	; 0x05
    1c06:	0f c0       	rjmp	.+30     	; 0x1c26 <LCD_Init+0x398>
    1c08:	89 e1       	ldi	r24, 0x19	; 25
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	9c 83       	std	Y+4, r25	; 0x04
    1c0e:	8b 83       	std	Y+3, r24	; 0x03
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	9c 81       	ldd	r25, Y+4	; 0x04
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	f1 f7       	brne	.-4      	; 0x1c14 <LCD_Init+0x386>
    1c18:	9c 83       	std	Y+4, r25	; 0x04
    1c1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	9e 83       	std	Y+6, r25	; 0x06
    1c24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c26:	8d 81       	ldd	r24, Y+5	; 0x05
    1c28:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2a:	00 97       	sbiw	r24, 0x00	; 0
    1c2c:	69 f7       	brne	.-38     	; 0x1c08 <LCD_Init+0x37a>
    1c2e:	14 c0       	rjmp	.+40     	; 0x1c58 <LCD_Init+0x3ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c30:	6f 81       	ldd	r22, Y+7	; 0x07
    1c32:	78 85       	ldd	r23, Y+8	; 0x08
    1c34:	89 85       	ldd	r24, Y+9	; 0x09
    1c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	9e 83       	std	Y+6, r25	; 0x06
    1c42:	8d 83       	std	Y+5, r24	; 0x05
    1c44:	8d 81       	ldd	r24, Y+5	; 0x05
    1c46:	9e 81       	ldd	r25, Y+6	; 0x06
    1c48:	9a 83       	std	Y+2, r25	; 0x02
    1c4a:	89 83       	std	Y+1, r24	; 0x01
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	f1 f7       	brne	.-4      	; 0x1c50 <LCD_Init+0x3c2>
    1c54:	9a 83       	std	Y+2, r25	; 0x02
    1c56:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1c58:	e8 96       	adiw	r28, 0x38	; 56
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	08 95       	ret

00001c6a <Send_CMD>:

void Send_CMD (u8 cmd)				// Function to send commands to LCD
{
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	ab 97       	sbiw	r28, 0x2b	; 43
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	8b a7       	std	Y+43, r24	; 0x2b
	CLEAR_BIT(LCD_CTRL_PORT, RS);	//Send RS Pin = 0 (Command Instruction)
    1c80:	a2 e3       	ldi	r26, 0x32	; 50
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e2 e3       	ldi	r30, 0x32	; 50
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	8e 7f       	andi	r24, 0xFE	; 254
    1c8c:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, RW);	//Send RW Pin = 0 (Write Mood)
    1c8e:	a2 e3       	ldi	r26, 0x32	; 50
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e2 e3       	ldi	r30, 0x32	; 50
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	8d 7f       	andi	r24, 0xFD	; 253
    1c9a:	8c 93       	st	X, r24
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	a0 e8       	ldi	r26, 0x80	; 128
    1ca2:	bf e3       	ldi	r27, 0x3F	; 63
    1ca4:	8f a3       	std	Y+39, r24	; 0x27
    1ca6:	98 a7       	std	Y+40, r25	; 0x28
    1ca8:	a9 a7       	std	Y+41, r26	; 0x29
    1caa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cac:	6f a1       	ldd	r22, Y+39	; 0x27
    1cae:	78 a5       	ldd	r23, Y+40	; 0x28
    1cb0:	89 a5       	ldd	r24, Y+41	; 0x29
    1cb2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	4a e7       	ldi	r20, 0x7A	; 122
    1cba:	53 e4       	ldi	r21, 0x43	; 67
    1cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	8b a3       	std	Y+35, r24	; 0x23
    1cc6:	9c a3       	std	Y+36, r25	; 0x24
    1cc8:	ad a3       	std	Y+37, r26	; 0x25
    1cca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ccc:	6b a1       	ldd	r22, Y+35	; 0x23
    1cce:	7c a1       	ldd	r23, Y+36	; 0x24
    1cd0:	8d a1       	ldd	r24, Y+37	; 0x25
    1cd2:	9e a1       	ldd	r25, Y+38	; 0x26
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	40 e8       	ldi	r20, 0x80	; 128
    1cda:	5f e3       	ldi	r21, 0x3F	; 63
    1cdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce0:	88 23       	and	r24, r24
    1ce2:	2c f4       	brge	.+10     	; 0x1cee <Send_CMD+0x84>
		__ticks = 1;
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	9a a3       	std	Y+34, r25	; 0x22
    1cea:	89 a3       	std	Y+33, r24	; 0x21
    1cec:	3f c0       	rjmp	.+126    	; 0x1d6c <Send_CMD+0x102>
	else if (__tmp > 65535)
    1cee:	6b a1       	ldd	r22, Y+35	; 0x23
    1cf0:	7c a1       	ldd	r23, Y+36	; 0x24
    1cf2:	8d a1       	ldd	r24, Y+37	; 0x25
    1cf4:	9e a1       	ldd	r25, Y+38	; 0x26
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	3f ef       	ldi	r19, 0xFF	; 255
    1cfa:	4f e7       	ldi	r20, 0x7F	; 127
    1cfc:	57 e4       	ldi	r21, 0x47	; 71
    1cfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d02:	18 16       	cp	r1, r24
    1d04:	4c f5       	brge	.+82     	; 0x1d58 <Send_CMD+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d06:	6f a1       	ldd	r22, Y+39	; 0x27
    1d08:	78 a5       	ldd	r23, Y+40	; 0x28
    1d0a:	89 a5       	ldd	r24, Y+41	; 0x29
    1d0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e2       	ldi	r20, 0x20	; 32
    1d14:	51 e4       	ldi	r21, 0x41	; 65
    1d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	bc 01       	movw	r22, r24
    1d20:	cd 01       	movw	r24, r26
    1d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	9a a3       	std	Y+34, r25	; 0x22
    1d2c:	89 a3       	std	Y+33, r24	; 0x21
    1d2e:	0f c0       	rjmp	.+30     	; 0x1d4e <Send_CMD+0xe4>
    1d30:	89 e1       	ldi	r24, 0x19	; 25
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	98 a3       	std	Y+32, r25	; 0x20
    1d36:	8f 8f       	std	Y+31, r24	; 0x1f
    1d38:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d3a:	98 a1       	ldd	r25, Y+32	; 0x20
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	f1 f7       	brne	.-4      	; 0x1d3c <Send_CMD+0xd2>
    1d40:	98 a3       	std	Y+32, r25	; 0x20
    1d42:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d44:	89 a1       	ldd	r24, Y+33	; 0x21
    1d46:	9a a1       	ldd	r25, Y+34	; 0x22
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	9a a3       	std	Y+34, r25	; 0x22
    1d4c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d50:	9a a1       	ldd	r25, Y+34	; 0x22
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	69 f7       	brne	.-38     	; 0x1d30 <Send_CMD+0xc6>
    1d56:	14 c0       	rjmp	.+40     	; 0x1d80 <Send_CMD+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d58:	6b a1       	ldd	r22, Y+35	; 0x23
    1d5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	9a a3       	std	Y+34, r25	; 0x22
    1d6a:	89 a3       	std	Y+33, r24	; 0x21
    1d6c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d6e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d70:	9e 8f       	std	Y+30, r25	; 0x1e
    1d72:	8d 8f       	std	Y+29, r24	; 0x1d
    1d74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d76:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <Send_CMD+0x10e>
    1d7c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d7e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);					//Delay 40ns until Enable Start
	SET_BIT(LCD_CTRL_PORT, EN);		//Send E Pin = 1 (Enable LCD)
    1d80:	a2 e3       	ldi	r26, 0x32	; 50
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e2 e3       	ldi	r30, 0x32	; 50
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	84 60       	ori	r24, 0x04	; 4
    1d8c:	8c 93       	st	X, r24
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	a0 e8       	ldi	r26, 0x80	; 128
    1d94:	bf e3       	ldi	r27, 0x3F	; 63
    1d96:	89 8f       	std	Y+25, r24	; 0x19
    1d98:	9a 8f       	std	Y+26, r25	; 0x1a
    1d9a:	ab 8f       	std	Y+27, r26	; 0x1b
    1d9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9e:	69 8d       	ldd	r22, Y+25	; 0x19
    1da0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1da2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1da4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	4a e7       	ldi	r20, 0x7A	; 122
    1dac:	53 e4       	ldi	r21, 0x43	; 67
    1dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	8d 8b       	std	Y+21, r24	; 0x15
    1db8:	9e 8b       	std	Y+22, r25	; 0x16
    1dba:	af 8b       	std	Y+23, r26	; 0x17
    1dbc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e8       	ldi	r20, 0x80	; 128
    1dcc:	5f e3       	ldi	r21, 0x3F	; 63
    1dce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dd2:	88 23       	and	r24, r24
    1dd4:	2c f4       	brge	.+10     	; 0x1de0 <Send_CMD+0x176>
		__ticks = 1;
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9c 8b       	std	Y+20, r25	; 0x14
    1ddc:	8b 8b       	std	Y+19, r24	; 0x13
    1dde:	3f c0       	rjmp	.+126    	; 0x1e5e <Send_CMD+0x1f4>
	else if (__tmp > 65535)
    1de0:	6d 89       	ldd	r22, Y+21	; 0x15
    1de2:	7e 89       	ldd	r23, Y+22	; 0x16
    1de4:	8f 89       	ldd	r24, Y+23	; 0x17
    1de6:	98 8d       	ldd	r25, Y+24	; 0x18
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	3f ef       	ldi	r19, 0xFF	; 255
    1dec:	4f e7       	ldi	r20, 0x7F	; 127
    1dee:	57 e4       	ldi	r21, 0x47	; 71
    1df0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1df4:	18 16       	cp	r1, r24
    1df6:	4c f5       	brge	.+82     	; 0x1e4a <Send_CMD+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df8:	69 8d       	ldd	r22, Y+25	; 0x19
    1dfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	40 e2       	ldi	r20, 0x20	; 32
    1e06:	51 e4       	ldi	r21, 0x41	; 65
    1e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	bc 01       	movw	r22, r24
    1e12:	cd 01       	movw	r24, r26
    1e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	9c 8b       	std	Y+20, r25	; 0x14
    1e1e:	8b 8b       	std	Y+19, r24	; 0x13
    1e20:	0f c0       	rjmp	.+30     	; 0x1e40 <Send_CMD+0x1d6>
    1e22:	89 e1       	ldi	r24, 0x19	; 25
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	9a 8b       	std	Y+18, r25	; 0x12
    1e28:	89 8b       	std	Y+17, r24	; 0x11
    1e2a:	89 89       	ldd	r24, Y+17	; 0x11
    1e2c:	9a 89       	ldd	r25, Y+18	; 0x12
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	f1 f7       	brne	.-4      	; 0x1e2e <Send_CMD+0x1c4>
    1e32:	9a 8b       	std	Y+18, r25	; 0x12
    1e34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e36:	8b 89       	ldd	r24, Y+19	; 0x13
    1e38:	9c 89       	ldd	r25, Y+20	; 0x14
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	9c 8b       	std	Y+20, r25	; 0x14
    1e3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e40:	8b 89       	ldd	r24, Y+19	; 0x13
    1e42:	9c 89       	ldd	r25, Y+20	; 0x14
    1e44:	00 97       	sbiw	r24, 0x00	; 0
    1e46:	69 f7       	brne	.-38     	; 0x1e22 <Send_CMD+0x1b8>
    1e48:	14 c0       	rjmp	.+40     	; 0x1e72 <Send_CMD+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e50:	98 8d       	ldd	r25, Y+24	; 0x18
    1e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	9c 8b       	std	Y+20, r25	; 0x14
    1e5c:	8b 8b       	std	Y+19, r24	; 0x13
    1e5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e60:	9c 89       	ldd	r25, Y+20	; 0x14
    1e62:	98 8b       	std	Y+16, r25	; 0x10
    1e64:	8f 87       	std	Y+15, r24	; 0x0f
    1e66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e68:	98 89       	ldd	r25, Y+16	; 0x10
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	f1 f7       	brne	.-4      	; 0x1e6a <Send_CMD+0x200>
    1e6e:	98 8b       	std	Y+16, r25	; 0x10
    1e70:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);					//Delay 1500ns until Enable Start
	LCD_DATA_PORT = cmd; 			//Send command through data pins
    1e72:	e5 e3       	ldi	r30, 0x35	; 53
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e78:	80 83       	st	Z, r24
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	a0 e8       	ldi	r26, 0x80	; 128
    1e80:	bf e3       	ldi	r27, 0x3F	; 63
    1e82:	8b 87       	std	Y+11, r24	; 0x0b
    1e84:	9c 87       	std	Y+12, r25	; 0x0c
    1e86:	ad 87       	std	Y+13, r26	; 0x0d
    1e88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	4a e7       	ldi	r20, 0x7A	; 122
    1e98:	53 e4       	ldi	r21, 0x43	; 67
    1e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	8f 83       	std	Y+7, r24	; 0x07
    1ea4:	98 87       	std	Y+8, r25	; 0x08
    1ea6:	a9 87       	std	Y+9, r26	; 0x09
    1ea8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1eac:	78 85       	ldd	r23, Y+8	; 0x08
    1eae:	89 85       	ldd	r24, Y+9	; 0x09
    1eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e8       	ldi	r20, 0x80	; 128
    1eb8:	5f e3       	ldi	r21, 0x3F	; 63
    1eba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ebe:	88 23       	and	r24, r24
    1ec0:	2c f4       	brge	.+10     	; 0x1ecc <Send_CMD+0x262>
		__ticks = 1;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9e 83       	std	Y+6, r25	; 0x06
    1ec8:	8d 83       	std	Y+5, r24	; 0x05
    1eca:	3f c0       	rjmp	.+126    	; 0x1f4a <Send_CMD+0x2e0>
	else if (__tmp > 65535)
    1ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ece:	78 85       	ldd	r23, Y+8	; 0x08
    1ed0:	89 85       	ldd	r24, Y+9	; 0x09
    1ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	3f ef       	ldi	r19, 0xFF	; 255
    1ed8:	4f e7       	ldi	r20, 0x7F	; 127
    1eda:	57 e4       	ldi	r21, 0x47	; 71
    1edc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ee0:	18 16       	cp	r1, r24
    1ee2:	4c f5       	brge	.+82     	; 0x1f36 <Send_CMD+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e2       	ldi	r20, 0x20	; 32
    1ef2:	51 e4       	ldi	r21, 0x41	; 65
    1ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	bc 01       	movw	r22, r24
    1efe:	cd 01       	movw	r24, r26
    1f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	9e 83       	std	Y+6, r25	; 0x06
    1f0a:	8d 83       	std	Y+5, r24	; 0x05
    1f0c:	0f c0       	rjmp	.+30     	; 0x1f2c <Send_CMD+0x2c2>
    1f0e:	89 e1       	ldi	r24, 0x19	; 25
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	9c 83       	std	Y+4, r25	; 0x04
    1f14:	8b 83       	std	Y+3, r24	; 0x03
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <Send_CMD+0x2b0>
    1f1e:	9c 83       	std	Y+4, r25	; 0x04
    1f20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f22:	8d 81       	ldd	r24, Y+5	; 0x05
    1f24:	9e 81       	ldd	r25, Y+6	; 0x06
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	9e 83       	std	Y+6, r25	; 0x06
    1f2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	69 f7       	brne	.-38     	; 0x1f0e <Send_CMD+0x2a4>
    1f34:	14 c0       	rjmp	.+40     	; 0x1f5e <Send_CMD+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f36:	6f 81       	ldd	r22, Y+7	; 0x07
    1f38:	78 85       	ldd	r23, Y+8	; 0x08
    1f3a:	89 85       	ldd	r24, Y+9	; 0x09
    1f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	9e 83       	std	Y+6, r25	; 0x06
    1f48:	8d 83       	std	Y+5, r24	; 0x05
    1f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4e:	9a 83       	std	Y+2, r25	; 0x02
    1f50:	89 83       	std	Y+1, r24	; 0x01
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	9a 81       	ldd	r25, Y+2	; 0x02
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <Send_CMD+0x2ec>
    1f5a:	9a 83       	std	Y+2, r25	; 0x02
    1f5c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);					//Delay 10ns until data sending is finished
	CLEAR_BIT(LCD_CTRL_PORT, EN);	//Send E Pin = 0 (Disable LCD)
    1f5e:	a2 e3       	ldi	r26, 0x32	; 50
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	e2 e3       	ldi	r30, 0x32	; 50
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	8b 7f       	andi	r24, 0xFB	; 251
    1f6a:	8c 93       	st	X, r24
}
    1f6c:	ab 96       	adiw	r28, 0x2b	; 43
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	de bf       	out	0x3e, r29	; 62
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	cd bf       	out	0x3d, r28	; 61
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	08 95       	ret

00001f7e <Send_DATA>:

void Send_DATA (u8 data)			// Function to send data to LCD
{
    1f7e:	df 93       	push	r29
    1f80:	cf 93       	push	r28
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
    1f86:	ab 97       	sbiw	r28, 0x2b	; 43
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	f8 94       	cli
    1f8c:	de bf       	out	0x3e, r29	; 62
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	8b a7       	std	Y+43, r24	; 0x2b
	SET_BIT(LCD_CTRL_PORT, RS);		//Send RS Pin = 1 (Command Instruction)
    1f94:	a2 e3       	ldi	r26, 0x32	; 50
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	e2 e3       	ldi	r30, 0x32	; 50
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	81 60       	ori	r24, 0x01	; 1
    1fa0:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT, RW);	//Send RW Pin = 0 (Write Mood)
    1fa2:	a2 e3       	ldi	r26, 0x32	; 50
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	e2 e3       	ldi	r30, 0x32	; 50
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	8d 7f       	andi	r24, 0xFD	; 253
    1fae:	8c 93       	st	X, r24
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	a0 e8       	ldi	r26, 0x80	; 128
    1fb6:	bf e3       	ldi	r27, 0x3F	; 63
    1fb8:	8f a3       	std	Y+39, r24	; 0x27
    1fba:	98 a7       	std	Y+40, r25	; 0x28
    1fbc:	a9 a7       	std	Y+41, r26	; 0x29
    1fbe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc0:	6f a1       	ldd	r22, Y+39	; 0x27
    1fc2:	78 a5       	ldd	r23, Y+40	; 0x28
    1fc4:	89 a5       	ldd	r24, Y+41	; 0x29
    1fc6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	4a e7       	ldi	r20, 0x7A	; 122
    1fce:	53 e4       	ldi	r21, 0x43	; 67
    1fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	8b a3       	std	Y+35, r24	; 0x23
    1fda:	9c a3       	std	Y+36, r25	; 0x24
    1fdc:	ad a3       	std	Y+37, r26	; 0x25
    1fde:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fe0:	6b a1       	ldd	r22, Y+35	; 0x23
    1fe2:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe4:	8d a1       	ldd	r24, Y+37	; 0x25
    1fe6:	9e a1       	ldd	r25, Y+38	; 0x26
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e8       	ldi	r20, 0x80	; 128
    1fee:	5f e3       	ldi	r21, 0x3F	; 63
    1ff0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff4:	88 23       	and	r24, r24
    1ff6:	2c f4       	brge	.+10     	; 0x2002 <Send_DATA+0x84>
		__ticks = 1;
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	9a a3       	std	Y+34, r25	; 0x22
    1ffe:	89 a3       	std	Y+33, r24	; 0x21
    2000:	3f c0       	rjmp	.+126    	; 0x2080 <Send_DATA+0x102>
	else if (__tmp > 65535)
    2002:	6b a1       	ldd	r22, Y+35	; 0x23
    2004:	7c a1       	ldd	r23, Y+36	; 0x24
    2006:	8d a1       	ldd	r24, Y+37	; 0x25
    2008:	9e a1       	ldd	r25, Y+38	; 0x26
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	3f ef       	ldi	r19, 0xFF	; 255
    200e:	4f e7       	ldi	r20, 0x7F	; 127
    2010:	57 e4       	ldi	r21, 0x47	; 71
    2012:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2016:	18 16       	cp	r1, r24
    2018:	4c f5       	brge	.+82     	; 0x206c <Send_DATA+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201a:	6f a1       	ldd	r22, Y+39	; 0x27
    201c:	78 a5       	ldd	r23, Y+40	; 0x28
    201e:	89 a5       	ldd	r24, Y+41	; 0x29
    2020:	9a a5       	ldd	r25, Y+42	; 0x2a
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e2       	ldi	r20, 0x20	; 32
    2028:	51 e4       	ldi	r21, 0x41	; 65
    202a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	bc 01       	movw	r22, r24
    2034:	cd 01       	movw	r24, r26
    2036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	9a a3       	std	Y+34, r25	; 0x22
    2040:	89 a3       	std	Y+33, r24	; 0x21
    2042:	0f c0       	rjmp	.+30     	; 0x2062 <Send_DATA+0xe4>
    2044:	89 e1       	ldi	r24, 0x19	; 25
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	98 a3       	std	Y+32, r25	; 0x20
    204a:	8f 8f       	std	Y+31, r24	; 0x1f
    204c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    204e:	98 a1       	ldd	r25, Y+32	; 0x20
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	f1 f7       	brne	.-4      	; 0x2050 <Send_DATA+0xd2>
    2054:	98 a3       	std	Y+32, r25	; 0x20
    2056:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2058:	89 a1       	ldd	r24, Y+33	; 0x21
    205a:	9a a1       	ldd	r25, Y+34	; 0x22
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	9a a3       	std	Y+34, r25	; 0x22
    2060:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2062:	89 a1       	ldd	r24, Y+33	; 0x21
    2064:	9a a1       	ldd	r25, Y+34	; 0x22
    2066:	00 97       	sbiw	r24, 0x00	; 0
    2068:	69 f7       	brne	.-38     	; 0x2044 <Send_DATA+0xc6>
    206a:	14 c0       	rjmp	.+40     	; 0x2094 <Send_DATA+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206c:	6b a1       	ldd	r22, Y+35	; 0x23
    206e:	7c a1       	ldd	r23, Y+36	; 0x24
    2070:	8d a1       	ldd	r24, Y+37	; 0x25
    2072:	9e a1       	ldd	r25, Y+38	; 0x26
    2074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	9a a3       	std	Y+34, r25	; 0x22
    207e:	89 a3       	std	Y+33, r24	; 0x21
    2080:	89 a1       	ldd	r24, Y+33	; 0x21
    2082:	9a a1       	ldd	r25, Y+34	; 0x22
    2084:	9e 8f       	std	Y+30, r25	; 0x1e
    2086:	8d 8f       	std	Y+29, r24	; 0x1d
    2088:	8d 8d       	ldd	r24, Y+29	; 0x1d
    208a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	f1 f7       	brne	.-4      	; 0x208c <Send_DATA+0x10e>
    2090:	9e 8f       	std	Y+30, r25	; 0x1e
    2092:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);					//Delay 40ns until Enable Start
	SET_BIT(LCD_CTRL_PORT, EN);		//Send E Pin = 1 (Enable LCD)
    2094:	a2 e3       	ldi	r26, 0x32	; 50
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e2 e3       	ldi	r30, 0x32	; 50
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	84 60       	ori	r24, 0x04	; 4
    20a0:	8c 93       	st	X, r24
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	a0 e8       	ldi	r26, 0x80	; 128
    20a8:	bf e3       	ldi	r27, 0x3F	; 63
    20aa:	89 8f       	std	Y+25, r24	; 0x19
    20ac:	9a 8f       	std	Y+26, r25	; 0x1a
    20ae:	ab 8f       	std	Y+27, r26	; 0x1b
    20b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b2:	69 8d       	ldd	r22, Y+25	; 0x19
    20b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	4a e7       	ldi	r20, 0x7A	; 122
    20c0:	53 e4       	ldi	r21, 0x43	; 67
    20c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	8d 8b       	std	Y+21, r24	; 0x15
    20cc:	9e 8b       	std	Y+22, r25	; 0x16
    20ce:	af 8b       	std	Y+23, r26	; 0x17
    20d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20d2:	6d 89       	ldd	r22, Y+21	; 0x15
    20d4:	7e 89       	ldd	r23, Y+22	; 0x16
    20d6:	8f 89       	ldd	r24, Y+23	; 0x17
    20d8:	98 8d       	ldd	r25, Y+24	; 0x18
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e8       	ldi	r20, 0x80	; 128
    20e0:	5f e3       	ldi	r21, 0x3F	; 63
    20e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e6:	88 23       	and	r24, r24
    20e8:	2c f4       	brge	.+10     	; 0x20f4 <Send_DATA+0x176>
		__ticks = 1;
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	9c 8b       	std	Y+20, r25	; 0x14
    20f0:	8b 8b       	std	Y+19, r24	; 0x13
    20f2:	3f c0       	rjmp	.+126    	; 0x2172 <Send_DATA+0x1f4>
	else if (__tmp > 65535)
    20f4:	6d 89       	ldd	r22, Y+21	; 0x15
    20f6:	7e 89       	ldd	r23, Y+22	; 0x16
    20f8:	8f 89       	ldd	r24, Y+23	; 0x17
    20fa:	98 8d       	ldd	r25, Y+24	; 0x18
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	3f ef       	ldi	r19, 0xFF	; 255
    2100:	4f e7       	ldi	r20, 0x7F	; 127
    2102:	57 e4       	ldi	r21, 0x47	; 71
    2104:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2108:	18 16       	cp	r1, r24
    210a:	4c f5       	brge	.+82     	; 0x215e <Send_DATA+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210c:	69 8d       	ldd	r22, Y+25	; 0x19
    210e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2110:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2112:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e2       	ldi	r20, 0x20	; 32
    211a:	51 e4       	ldi	r21, 0x41	; 65
    211c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	bc 01       	movw	r22, r24
    2126:	cd 01       	movw	r24, r26
    2128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	9c 8b       	std	Y+20, r25	; 0x14
    2132:	8b 8b       	std	Y+19, r24	; 0x13
    2134:	0f c0       	rjmp	.+30     	; 0x2154 <Send_DATA+0x1d6>
    2136:	89 e1       	ldi	r24, 0x19	; 25
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	9a 8b       	std	Y+18, r25	; 0x12
    213c:	89 8b       	std	Y+17, r24	; 0x11
    213e:	89 89       	ldd	r24, Y+17	; 0x11
    2140:	9a 89       	ldd	r25, Y+18	; 0x12
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	f1 f7       	brne	.-4      	; 0x2142 <Send_DATA+0x1c4>
    2146:	9a 8b       	std	Y+18, r25	; 0x12
    2148:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214a:	8b 89       	ldd	r24, Y+19	; 0x13
    214c:	9c 89       	ldd	r25, Y+20	; 0x14
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	9c 8b       	std	Y+20, r25	; 0x14
    2152:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2154:	8b 89       	ldd	r24, Y+19	; 0x13
    2156:	9c 89       	ldd	r25, Y+20	; 0x14
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	69 f7       	brne	.-38     	; 0x2136 <Send_DATA+0x1b8>
    215c:	14 c0       	rjmp	.+40     	; 0x2186 <Send_DATA+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215e:	6d 89       	ldd	r22, Y+21	; 0x15
    2160:	7e 89       	ldd	r23, Y+22	; 0x16
    2162:	8f 89       	ldd	r24, Y+23	; 0x17
    2164:	98 8d       	ldd	r25, Y+24	; 0x18
    2166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	9c 8b       	std	Y+20, r25	; 0x14
    2170:	8b 8b       	std	Y+19, r24	; 0x13
    2172:	8b 89       	ldd	r24, Y+19	; 0x13
    2174:	9c 89       	ldd	r25, Y+20	; 0x14
    2176:	98 8b       	std	Y+16, r25	; 0x10
    2178:	8f 87       	std	Y+15, r24	; 0x0f
    217a:	8f 85       	ldd	r24, Y+15	; 0x0f
    217c:	98 89       	ldd	r25, Y+16	; 0x10
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	f1 f7       	brne	.-4      	; 0x217e <Send_DATA+0x200>
    2182:	98 8b       	std	Y+16, r25	; 0x10
    2184:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);					//Delay 1500ns until Enable Start
	LCD_DATA_PORT = data; 			//Send data through data pins
    2186:	e5 e3       	ldi	r30, 0x35	; 53
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	8b a5       	ldd	r24, Y+43	; 0x2b
    218c:	80 83       	st	Z, r24
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	a0 e8       	ldi	r26, 0x80	; 128
    2194:	bf e3       	ldi	r27, 0x3F	; 63
    2196:	8b 87       	std	Y+11, r24	; 0x0b
    2198:	9c 87       	std	Y+12, r25	; 0x0c
    219a:	ad 87       	std	Y+13, r26	; 0x0d
    219c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219e:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	4a e7       	ldi	r20, 0x7A	; 122
    21ac:	53 e4       	ldi	r21, 0x43	; 67
    21ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	8f 83       	std	Y+7, r24	; 0x07
    21b8:	98 87       	std	Y+8, r25	; 0x08
    21ba:	a9 87       	std	Y+9, r26	; 0x09
    21bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21be:	6f 81       	ldd	r22, Y+7	; 0x07
    21c0:	78 85       	ldd	r23, Y+8	; 0x08
    21c2:	89 85       	ldd	r24, Y+9	; 0x09
    21c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e8       	ldi	r20, 0x80	; 128
    21cc:	5f e3       	ldi	r21, 0x3F	; 63
    21ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21d2:	88 23       	and	r24, r24
    21d4:	2c f4       	brge	.+10     	; 0x21e0 <Send_DATA+0x262>
		__ticks = 1;
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	9e 83       	std	Y+6, r25	; 0x06
    21dc:	8d 83       	std	Y+5, r24	; 0x05
    21de:	3f c0       	rjmp	.+126    	; 0x225e <Send_DATA+0x2e0>
	else if (__tmp > 65535)
    21e0:	6f 81       	ldd	r22, Y+7	; 0x07
    21e2:	78 85       	ldd	r23, Y+8	; 0x08
    21e4:	89 85       	ldd	r24, Y+9	; 0x09
    21e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	3f ef       	ldi	r19, 0xFF	; 255
    21ec:	4f e7       	ldi	r20, 0x7F	; 127
    21ee:	57 e4       	ldi	r21, 0x47	; 71
    21f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21f4:	18 16       	cp	r1, r24
    21f6:	4c f5       	brge	.+82     	; 0x224a <Send_DATA+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e2       	ldi	r20, 0x20	; 32
    2206:	51 e4       	ldi	r21, 0x41	; 65
    2208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	bc 01       	movw	r22, r24
    2212:	cd 01       	movw	r24, r26
    2214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	9e 83       	std	Y+6, r25	; 0x06
    221e:	8d 83       	std	Y+5, r24	; 0x05
    2220:	0f c0       	rjmp	.+30     	; 0x2240 <Send_DATA+0x2c2>
    2222:	89 e1       	ldi	r24, 0x19	; 25
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	9c 83       	std	Y+4, r25	; 0x04
    2228:	8b 83       	std	Y+3, r24	; 0x03
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	f1 f7       	brne	.-4      	; 0x222e <Send_DATA+0x2b0>
    2232:	9c 83       	std	Y+4, r25	; 0x04
    2234:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2236:	8d 81       	ldd	r24, Y+5	; 0x05
    2238:	9e 81       	ldd	r25, Y+6	; 0x06
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	9e 83       	std	Y+6, r25	; 0x06
    223e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2240:	8d 81       	ldd	r24, Y+5	; 0x05
    2242:	9e 81       	ldd	r25, Y+6	; 0x06
    2244:	00 97       	sbiw	r24, 0x00	; 0
    2246:	69 f7       	brne	.-38     	; 0x2222 <Send_DATA+0x2a4>
    2248:	14 c0       	rjmp	.+40     	; 0x2272 <Send_DATA+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    224a:	6f 81       	ldd	r22, Y+7	; 0x07
    224c:	78 85       	ldd	r23, Y+8	; 0x08
    224e:	89 85       	ldd	r24, Y+9	; 0x09
    2250:	9a 85       	ldd	r25, Y+10	; 0x0a
    2252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	9e 83       	std	Y+6, r25	; 0x06
    225c:	8d 83       	std	Y+5, r24	; 0x05
    225e:	8d 81       	ldd	r24, Y+5	; 0x05
    2260:	9e 81       	ldd	r25, Y+6	; 0x06
    2262:	9a 83       	std	Y+2, r25	; 0x02
    2264:	89 83       	std	Y+1, r24	; 0x01
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	9a 81       	ldd	r25, Y+2	; 0x02
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	f1 f7       	brne	.-4      	; 0x226a <Send_DATA+0x2ec>
    226e:	9a 83       	std	Y+2, r25	; 0x02
    2270:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);					//Delay 10ns until data sending is finished
	CLEAR_BIT(LCD_CTRL_PORT, EN);	//Send E Pin = 0 (Disable LCD)
    2272:	a2 e3       	ldi	r26, 0x32	; 50
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	e2 e3       	ldi	r30, 0x32	; 50
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	8b 7f       	andi	r24, 0xFB	; 251
    227e:	8c 93       	st	X, r24
}
    2280:	ab 96       	adiw	r28, 0x2b	; 43
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	cd bf       	out	0x3d, r28	; 61
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	08 95       	ret

00002292 <Display_Str>:

void Display_Str (const u8 *str)	// Function to send data to LCD
{
    2292:	df 93       	push	r29
    2294:	cf 93       	push	r28
    2296:	00 d0       	rcall	.+0      	; 0x2298 <Display_Str+0x6>
    2298:	0f 92       	push	r0
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
    229e:	9b 83       	std	Y+3, r25	; 0x03
    22a0:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    22a2:	19 82       	std	Y+1, r1	; 0x01
    22a4:	0e c0       	rjmp	.+28     	; 0x22c2 <Display_Str+0x30>
	while (str[i] != '\0')
	{
		Send_DATA (str[i]);
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	28 2f       	mov	r18, r24
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	8a 81       	ldd	r24, Y+2	; 0x02
    22ae:	9b 81       	ldd	r25, Y+3	; 0x03
    22b0:	fc 01       	movw	r30, r24
    22b2:	e2 0f       	add	r30, r18
    22b4:	f3 1f       	adc	r31, r19
    22b6:	80 81       	ld	r24, Z
    22b8:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <Send_DATA>
		i++;
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	8f 5f       	subi	r24, 0xFF	; 255
    22c0:	89 83       	std	Y+1, r24	; 0x01
}

void Display_Str (const u8 *str)	// Function to send data to LCD
{
	u8 i=0;
	while (str[i] != '\0')
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	28 2f       	mov	r18, r24
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ca:	9b 81       	ldd	r25, Y+3	; 0x03
    22cc:	fc 01       	movw	r30, r24
    22ce:	e2 0f       	add	r30, r18
    22d0:	f3 1f       	adc	r31, r19
    22d2:	80 81       	ld	r24, Z
    22d4:	88 23       	and	r24, r24
    22d6:	39 f7       	brne	.-50     	; 0x22a6 <Display_Str+0x14>
	{
		Send_DATA (str[i]);
		i++;
	}
}
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	08 95       	ret

000022e4 <Go_To_Row_Col>:

void Go_To_Row_Col (u8 row, u8 col)	// Function to move to certain column and row on LCD
{
    22e4:	df 93       	push	r29
    22e6:	cf 93       	push	r28
    22e8:	00 d0       	rcall	.+0      	; 0x22ea <Go_To_Row_Col+0x6>
    22ea:	00 d0       	rcall	.+0      	; 0x22ec <Go_To_Row_Col+0x8>
    22ec:	0f 92       	push	r0
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	8a 83       	std	Y+2, r24	; 0x02
    22f4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Address;
	switch (row)
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	28 2f       	mov	r18, r24
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	3d 83       	std	Y+5, r19	; 0x05
    22fe:	2c 83       	std	Y+4, r18	; 0x04
    2300:	8c 81       	ldd	r24, Y+4	; 0x04
    2302:	9d 81       	ldd	r25, Y+5	; 0x05
    2304:	81 30       	cpi	r24, 0x01	; 1
    2306:	91 05       	cpc	r25, r1
    2308:	c1 f0       	breq	.+48     	; 0x233a <Go_To_Row_Col+0x56>
    230a:	2c 81       	ldd	r18, Y+4	; 0x04
    230c:	3d 81       	ldd	r19, Y+5	; 0x05
    230e:	22 30       	cpi	r18, 0x02	; 2
    2310:	31 05       	cpc	r19, r1
    2312:	2c f4       	brge	.+10     	; 0x231e <Go_To_Row_Col+0x3a>
    2314:	8c 81       	ldd	r24, Y+4	; 0x04
    2316:	9d 81       	ldd	r25, Y+5	; 0x05
    2318:	00 97       	sbiw	r24, 0x00	; 0
    231a:	61 f0       	breq	.+24     	; 0x2334 <Go_To_Row_Col+0x50>
    231c:	19 c0       	rjmp	.+50     	; 0x2350 <Go_To_Row_Col+0x6c>
    231e:	2c 81       	ldd	r18, Y+4	; 0x04
    2320:	3d 81       	ldd	r19, Y+5	; 0x05
    2322:	22 30       	cpi	r18, 0x02	; 2
    2324:	31 05       	cpc	r19, r1
    2326:	69 f0       	breq	.+26     	; 0x2342 <Go_To_Row_Col+0x5e>
    2328:	8c 81       	ldd	r24, Y+4	; 0x04
    232a:	9d 81       	ldd	r25, Y+5	; 0x05
    232c:	83 30       	cpi	r24, 0x03	; 3
    232e:	91 05       	cpc	r25, r1
    2330:	61 f0       	breq	.+24     	; 0x234a <Go_To_Row_Col+0x66>
    2332:	0e c0       	rjmp	.+28     	; 0x2350 <Go_To_Row_Col+0x6c>
	{
	case 0:
		Address = col;
    2334:	8b 81       	ldd	r24, Y+3	; 0x03
    2336:	89 83       	std	Y+1, r24	; 0x01
    2338:	0b c0       	rjmp	.+22     	; 0x2350 <Go_To_Row_Col+0x6c>
		break;
	case 1:
		Address = col + 0x40;
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	80 5c       	subi	r24, 0xC0	; 192
    233e:	89 83       	std	Y+1, r24	; 0x01
    2340:	07 c0       	rjmp	.+14     	; 0x2350 <Go_To_Row_Col+0x6c>
		break;
	case 2:
		Address = col + 0x10;
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	80 5f       	subi	r24, 0xF0	; 240
    2346:	89 83       	std	Y+1, r24	; 0x01
    2348:	03 c0       	rjmp	.+6      	; 0x2350 <Go_To_Row_Col+0x6c>
		break;
	case 3:
		Address = col + 0x50;
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	80 5b       	subi	r24, 0xB0	; 176
    234e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	Send_CMD (Address | SET_CURSOR_LOCATION); //To move cursor to the Address location
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	80 68       	ori	r24, 0x80	; 128
    2354:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <Send_CMD>
}
    2358:	0f 90       	pop	r0
    235a:	0f 90       	pop	r0
    235c:	0f 90       	pop	r0
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	cf 91       	pop	r28
    2364:	df 91       	pop	r29
    2366:	08 95       	ret

00002368 <LCD_CLEAR>:

void LCD_CLEAR (void)
{
    2368:	df 93       	push	r29
    236a:	cf 93       	push	r28
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
	Send_CMD (CLEAR_COMMAND);
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <Send_CMD>
}
    2376:	cf 91       	pop	r28
    2378:	df 91       	pop	r29
    237a:	08 95       	ret

0000237c <Display_Str_Row_Col>:

void Display_Str_Row_Col (u8 row, u8 col, const u8 *str)	//Display string at specified row and column
{
    237c:	df 93       	push	r29
    237e:	cf 93       	push	r28
    2380:	00 d0       	rcall	.+0      	; 0x2382 <Display_Str_Row_Col+0x6>
    2382:	00 d0       	rcall	.+0      	; 0x2384 <Display_Str_Row_Col+0x8>
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
    2388:	89 83       	std	Y+1, r24	; 0x01
    238a:	6a 83       	std	Y+2, r22	; 0x02
    238c:	5c 83       	std	Y+4, r21	; 0x04
    238e:	4b 83       	std	Y+3, r20	; 0x03
	Go_To_Row_Col (row,col);
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	6a 81       	ldd	r22, Y+2	; 0x02
    2394:	0e 94 72 11 	call	0x22e4	; 0x22e4 <Go_To_Row_Col>
	Display_Str (str);
    2398:	8b 81       	ldd	r24, Y+3	; 0x03
    239a:	9c 81       	ldd	r25, Y+4	; 0x04
    239c:	0e 94 49 11 	call	0x2292	; 0x2292 <Display_Str>
}
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	cf 91       	pop	r28
    23aa:	df 91       	pop	r29
    23ac:	08 95       	ret

000023ae <Integer_TO_String>:

void Integer_TO_String (u8 value)	// Display certain integer value on screen
{
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
    23b6:	c5 56       	subi	r28, 0x65	; 101
    23b8:	d0 40       	sbci	r29, 0x00	; 0
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	fe 01       	movw	r30, r28
    23c6:	eb 59       	subi	r30, 0x9B	; 155
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	80 83       	st	Z, r24
	u8 number_str[100];
	itoa (value, number_str, 10);
    23cc:	fe 01       	movw	r30, r28
    23ce:	eb 59       	subi	r30, 0x9B	; 155
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	80 81       	ld	r24, Z
    23d4:	88 2f       	mov	r24, r24
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	9e 01       	movw	r18, r28
    23da:	2f 5f       	subi	r18, 0xFF	; 255
    23dc:	3f 4f       	sbci	r19, 0xFF	; 255
    23de:	b9 01       	movw	r22, r18
    23e0:	4a e0       	ldi	r20, 0x0A	; 10
    23e2:	50 e0       	ldi	r21, 0x00	; 0
    23e4:	0e 94 74 12 	call	0x24e8	; 0x24e8 <itoa>
	Display_Str (number_str);
    23e8:	ce 01       	movw	r24, r28
    23ea:	01 96       	adiw	r24, 0x01	; 1
    23ec:	0e 94 49 11 	call	0x2292	; 0x2292 <Display_Str>
}
    23f0:	cb 59       	subi	r28, 0x9B	; 155
    23f2:	df 4f       	sbci	r29, 0xFF	; 255
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	f8 94       	cli
    23f8:	de bf       	out	0x3e, r29	; 62
    23fa:	0f be       	out	0x3f, r0	; 63
    23fc:	cd bf       	out	0x3d, r28	; 61
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	08 95       	ret

00002404 <main>:
#include <avr/io.h>
#include "../../MCAL/DIO/DIO.h"
#include "../../MCAL/UART/UART.h"
int main()
{
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
	SPI_InitSlave();
    240c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <SPI_InitSlave>
	Set_PinDir(PORT_C,Pin_0,OUTPUT);
    2410:	82 e0       	ldi	r24, 0x02	; 2
    2412:	60 e0       	ldi	r22, 0x00	; 0
    2414:	41 e0       	ldi	r20, 0x01	; 1
    2416:	0e 94 1a 08 	call	0x1034	; 0x1034 <Set_PinDir>
	Set_PinDir(PORT_C,Pin_1,OUTPUT);
    241a:	82 e0       	ldi	r24, 0x02	; 2
    241c:	61 e0       	ldi	r22, 0x01	; 1
    241e:	41 e0       	ldi	r20, 0x01	; 1
    2420:	0e 94 1a 08 	call	0x1034	; 0x1034 <Set_PinDir>
	while(1)
	{

		if(SPI_receiveByte() == '1')
    2424:	0e 94 b4 06 	call	0xd68	; 0xd68 <SPI_receiveByte>
    2428:	81 33       	cpi	r24, 0x31	; 49
    242a:	91 05       	cpc	r25, r1
    242c:	59 f4       	brne	.+22     	; 0x2444 <main+0x40>
		{
			Set_PinLevel(PORT_C,Pin_0,HIGH);
    242e:	82 e0       	ldi	r24, 0x02	; 2
    2430:	60 e0       	ldi	r22, 0x00	; 0
    2432:	41 e0       	ldi	r20, 0x01	; 1
    2434:	0e 94 16 09 	call	0x122c	; 0x122c <Set_PinLevel>
			Set_PinLevel(PORT_C,Pin_1,LOW);
    2438:	82 e0       	ldi	r24, 0x02	; 2
    243a:	61 e0       	ldi	r22, 0x01	; 1
    243c:	40 e0       	ldi	r20, 0x00	; 0
    243e:	0e 94 16 09 	call	0x122c	; 0x122c <Set_PinLevel>
    2442:	f0 cf       	rjmp	.-32     	; 0x2424 <main+0x20>
		}
		else if(SPI_receiveByte() == '2')
    2444:	0e 94 b4 06 	call	0xd68	; 0xd68 <SPI_receiveByte>
    2448:	82 33       	cpi	r24, 0x32	; 50
    244a:	91 05       	cpc	r25, r1
    244c:	59 f4       	brne	.+22     	; 0x2464 <main+0x60>
		{
			Set_PinLevel(PORT_C,Pin_0,LOW);
    244e:	82 e0       	ldi	r24, 0x02	; 2
    2450:	60 e0       	ldi	r22, 0x00	; 0
    2452:	40 e0       	ldi	r20, 0x00	; 0
    2454:	0e 94 16 09 	call	0x122c	; 0x122c <Set_PinLevel>
			Set_PinLevel(PORT_C,Pin_1,HIGH);
    2458:	82 e0       	ldi	r24, 0x02	; 2
    245a:	61 e0       	ldi	r22, 0x01	; 1
    245c:	41 e0       	ldi	r20, 0x01	; 1
    245e:	0e 94 16 09 	call	0x122c	; 0x122c <Set_PinLevel>
    2462:	e0 cf       	rjmp	.-64     	; 0x2424 <main+0x20>
		}
		else
		{
			Set_PinLevel(PORT_C,Pin_0,LOW);
    2464:	82 e0       	ldi	r24, 0x02	; 2
    2466:	60 e0       	ldi	r22, 0x00	; 0
    2468:	40 e0       	ldi	r20, 0x00	; 0
    246a:	0e 94 16 09 	call	0x122c	; 0x122c <Set_PinLevel>
			Set_PinLevel(PORT_C,Pin_1,LOW);
    246e:	82 e0       	ldi	r24, 0x02	; 2
    2470:	61 e0       	ldi	r22, 0x01	; 1
    2472:	40 e0       	ldi	r20, 0x00	; 0
    2474:	0e 94 16 09 	call	0x122c	; 0x122c <Set_PinLevel>
    2478:	d5 cf       	rjmp	.-86     	; 0x2424 <main+0x20>

0000247a <__prologue_saves__>:
    247a:	2f 92       	push	r2
    247c:	3f 92       	push	r3
    247e:	4f 92       	push	r4
    2480:	5f 92       	push	r5
    2482:	6f 92       	push	r6
    2484:	7f 92       	push	r7
    2486:	8f 92       	push	r8
    2488:	9f 92       	push	r9
    248a:	af 92       	push	r10
    248c:	bf 92       	push	r11
    248e:	cf 92       	push	r12
    2490:	df 92       	push	r13
    2492:	ef 92       	push	r14
    2494:	ff 92       	push	r15
    2496:	0f 93       	push	r16
    2498:	1f 93       	push	r17
    249a:	cf 93       	push	r28
    249c:	df 93       	push	r29
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	ca 1b       	sub	r28, r26
    24a4:	db 0b       	sbc	r29, r27
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	f8 94       	cli
    24aa:	de bf       	out	0x3e, r29	; 62
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	cd bf       	out	0x3d, r28	; 61
    24b0:	09 94       	ijmp

000024b2 <__epilogue_restores__>:
    24b2:	2a 88       	ldd	r2, Y+18	; 0x12
    24b4:	39 88       	ldd	r3, Y+17	; 0x11
    24b6:	48 88       	ldd	r4, Y+16	; 0x10
    24b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    24ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    24bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    24be:	8c 84       	ldd	r8, Y+12	; 0x0c
    24c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    24c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    24c4:	b9 84       	ldd	r11, Y+9	; 0x09
    24c6:	c8 84       	ldd	r12, Y+8	; 0x08
    24c8:	df 80       	ldd	r13, Y+7	; 0x07
    24ca:	ee 80       	ldd	r14, Y+6	; 0x06
    24cc:	fd 80       	ldd	r15, Y+5	; 0x05
    24ce:	0c 81       	ldd	r16, Y+4	; 0x04
    24d0:	1b 81       	ldd	r17, Y+3	; 0x03
    24d2:	aa 81       	ldd	r26, Y+2	; 0x02
    24d4:	b9 81       	ldd	r27, Y+1	; 0x01
    24d6:	ce 0f       	add	r28, r30
    24d8:	d1 1d       	adc	r29, r1
    24da:	0f b6       	in	r0, 0x3f	; 63
    24dc:	f8 94       	cli
    24de:	de bf       	out	0x3e, r29	; 62
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	cd bf       	out	0x3d, r28	; 61
    24e4:	ed 01       	movw	r28, r26
    24e6:	08 95       	ret

000024e8 <itoa>:
    24e8:	fb 01       	movw	r30, r22
    24ea:	9f 01       	movw	r18, r30
    24ec:	e8 94       	clt
    24ee:	42 30       	cpi	r20, 0x02	; 2
    24f0:	c4 f0       	brlt	.+48     	; 0x2522 <itoa+0x3a>
    24f2:	45 32       	cpi	r20, 0x25	; 37
    24f4:	b4 f4       	brge	.+44     	; 0x2522 <itoa+0x3a>
    24f6:	4a 30       	cpi	r20, 0x0A	; 10
    24f8:	29 f4       	brne	.+10     	; 0x2504 <itoa+0x1c>
    24fa:	97 fb       	bst	r25, 7
    24fc:	1e f4       	brtc	.+6      	; 0x2504 <itoa+0x1c>
    24fe:	90 95       	com	r25
    2500:	81 95       	neg	r24
    2502:	9f 4f       	sbci	r25, 0xFF	; 255
    2504:	64 2f       	mov	r22, r20
    2506:	77 27       	eor	r23, r23
    2508:	0e 94 a5 12 	call	0x254a	; 0x254a <__udivmodhi4>
    250c:	80 5d       	subi	r24, 0xD0	; 208
    250e:	8a 33       	cpi	r24, 0x3A	; 58
    2510:	0c f0       	brlt	.+2      	; 0x2514 <itoa+0x2c>
    2512:	89 5d       	subi	r24, 0xD9	; 217
    2514:	81 93       	st	Z+, r24
    2516:	cb 01       	movw	r24, r22
    2518:	00 97       	sbiw	r24, 0x00	; 0
    251a:	a1 f7       	brne	.-24     	; 0x2504 <itoa+0x1c>
    251c:	16 f4       	brtc	.+4      	; 0x2522 <itoa+0x3a>
    251e:	5d e2       	ldi	r21, 0x2D	; 45
    2520:	51 93       	st	Z+, r21
    2522:	10 82       	st	Z, r1
    2524:	c9 01       	movw	r24, r18
    2526:	0c 94 95 12 	jmp	0x252a	; 0x252a <strrev>

0000252a <strrev>:
    252a:	dc 01       	movw	r26, r24
    252c:	fc 01       	movw	r30, r24
    252e:	67 2f       	mov	r22, r23
    2530:	71 91       	ld	r23, Z+
    2532:	77 23       	and	r23, r23
    2534:	e1 f7       	brne	.-8      	; 0x252e <strrev+0x4>
    2536:	32 97       	sbiw	r30, 0x02	; 2
    2538:	04 c0       	rjmp	.+8      	; 0x2542 <strrev+0x18>
    253a:	7c 91       	ld	r23, X
    253c:	6d 93       	st	X+, r22
    253e:	70 83       	st	Z, r23
    2540:	62 91       	ld	r22, -Z
    2542:	ae 17       	cp	r26, r30
    2544:	bf 07       	cpc	r27, r31
    2546:	c8 f3       	brcs	.-14     	; 0x253a <strrev+0x10>
    2548:	08 95       	ret

0000254a <__udivmodhi4>:
    254a:	aa 1b       	sub	r26, r26
    254c:	bb 1b       	sub	r27, r27
    254e:	51 e1       	ldi	r21, 0x11	; 17
    2550:	07 c0       	rjmp	.+14     	; 0x2560 <__udivmodhi4_ep>

00002552 <__udivmodhi4_loop>:
    2552:	aa 1f       	adc	r26, r26
    2554:	bb 1f       	adc	r27, r27
    2556:	a6 17       	cp	r26, r22
    2558:	b7 07       	cpc	r27, r23
    255a:	10 f0       	brcs	.+4      	; 0x2560 <__udivmodhi4_ep>
    255c:	a6 1b       	sub	r26, r22
    255e:	b7 0b       	sbc	r27, r23

00002560 <__udivmodhi4_ep>:
    2560:	88 1f       	adc	r24, r24
    2562:	99 1f       	adc	r25, r25
    2564:	5a 95       	dec	r21
    2566:	a9 f7       	brne	.-22     	; 0x2552 <__udivmodhi4_loop>
    2568:	80 95       	com	r24
    256a:	90 95       	com	r25
    256c:	bc 01       	movw	r22, r24
    256e:	cd 01       	movw	r24, r26
    2570:	08 95       	ret

00002572 <_exit>:
    2572:	f8 94       	cli

00002574 <__stop_program>:
    2574:	ff cf       	rjmp	.-2      	; 0x2574 <__stop_program>
